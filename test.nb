(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    345677,       8119]
NotebookOptionsPosition[    328506,       7831]
NotebookOutlinePosition[    328950,       7848]
CellTagsIndexPosition[    328907,       7845]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Test DCM package", "Title",
 CellChangeTimes->{{3.814181718760399*^9, 3.814181726792959*^9}, {
  3.814182746865533*^9, 3.8141827488723803`*^9}, {3.826215489290008*^9, 
  3.826215493318613*^9}},ExpressionUUID->"99301676-6df3-42db-9e11-\
4144779f6f50"],

Cell[CellGroupData[{

Cell["Setup", "Chapter",
 CellChangeTimes->{{3.8141822152249403`*^9, 
  3.814182215867734*^9}},ExpressionUUID->"e6566f31-59ce-40cb-b911-\
d2d98f712a05"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.814185109958004*^9, 3.8141851225642567`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"b01b0946-f6a3-4215-aa50-697bdf77e0d5"],

Cell["Load DCM in this way to have proper monitor of the progress.", "Text",
 CellChangeTimes->{{3.826295506434067*^9, 
  3.826295525882124*^9}},ExpressionUUID->"53c25db4-7134-4ef2-a9b7-\
fb3a0239f384"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.814185109958004*^9, 3.8141851225642567`*^9}, {
  3.826295595800872*^9, 3.826295597772654*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b5e6d528-28d8-4d7b-9e6c-407b44581c4b"],

Cell[BoxData[
 RowBox[{"On", "[", "Assert", "]"}]], "Input",
 CellChangeTimes->{{3.826295712744947*^9, 3.826295717938229*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"267a7230-0ad8-4f51-bf6c-24dc1c913366"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Heavy tail distribution", "Chapter",
 CellChangeTimes->{{3.8262164373238907`*^9, 
  3.826216454082396*^9}},ExpressionUUID->"634d113c-d754-427f-9028-\
8718829cfb58"],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox["heavyTailDist", TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"f3ec23ba-ab7c-4cd0-b9cd-f5f174760861"]], \
"Section",
 CellChangeTimes->{{3.826217678186203*^9, 
  3.826217678732039*^9}},ExpressionUUID->"6a2522b2-b776-47be-bfbc-\
005543736216"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.826216455883198*^9, 3.826216458230979*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"68987963-70b5-473a-803a-ce5e43172b94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "heavyTailDist"}]], "Input",
 CellChangeTimes->{{3.8262164597879353`*^9, 3.826216468920141*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"9f882163-be40-43d7-9a78-ba26fa41ef80"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"heavyTailDist[a,r] returns a discrete probability \
distribution on integers with mean r and right tail of the order 1/x^a\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"heavyTailDist", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`a_", "/;", 
                    RowBox[{"DCM`Private`a", ">", "1"}]}], ",", 
                    RowBox[{"DCM`Private`r_", "/;", 
                    RowBox[{"DCM`Private`r", ">", "0"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`prob1", ",", "DCM`Private`pdf1", ",",
                     "DCM`Private`mean1", ",", "DCM`Private`p", ",", 
                    "DCM`Private`p1", ",", "DCM`Private`prob2", ",", 
                    "DCM`Private`pdf2"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`prob1", "=", 
                    RowBox[{"ProbabilityDistribution", "[", 
                    RowBox[{
                    FractionBox["1", 
                    SuperscriptBox["DCM`Private`x", 
                    RowBox[{"DCM`Private`a", "+", "1"}]]], ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`x", ",", "DCM`Private`r", ",", 
                    "\[Infinity]", ",", "1"}], "}"}], ",", 
                    RowBox[{"Method", "\[Rule]", "\"Normalize\""}]}], "]"}]}],
                     ";", 
                    RowBox[{
                    RowBox[{"DCM`Private`pdf1", "[", "DCM`Private`x_", "]"}], 
                    "=", 
                    RowBox[{"PDF", "[", 
                    RowBox[{"DCM`Private`prob1", ",", "DCM`Private`x"}], 
                    "]"}]}], ";", 
                    RowBox[{"DCM`Private`mean1", "=", 
                    RowBox[{"Mean", "[", "DCM`Private`prob1", "]"}]}], ";", 
                    RowBox[{"DCM`Private`p1", "=", 
                    RowBox[{"DCM`Private`p", "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"Solve", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "DCM`Private`p"}], ")"}], " ", 
                    "DCM`Private`mean1"}], "\[Equal]", "DCM`Private`r"}], ",",
                     "DCM`Private`p"}], "]"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"DCM`Private`pdf2", "[", "DCM`Private`x_", "]"}], 
                    "=", 
                    RowBox[{"Simplify", "[", 
                    RowBox[{"Piecewise", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`p1", ",", 
                    RowBox[{"DCM`Private`x", "\[Equal]", "0"}]}], "}"}], ",", 
                    
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "DCM`Private`p1"}], ")"}], " ", 
                    RowBox[{"DCM`Private`pdf1", "[", "DCM`Private`x", "]"}]}],
                     ",", 
                    
                    RowBox[{"DCM`Private`x", "\[GreaterEqual]", 
                    "DCM`Private`r"}]}], "}"}]}], "}"}], "]"}], "]"}]}], ";", 
                    
                    RowBox[{"DCM`Private`prob2", "=", 
                    RowBox[{"ProbabilityDistribution", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`pdf2", "[", "DCM`Private`x", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`x", ",", "0", ",", "\[Infinity]", 
                    ",", "1"}], "}"}]}], "]"}]}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`heavyTailDist\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"heavyTailDist[a,r] returns a discrete probability \
distribution on integers with mean r and right tail of the order 1/x^a\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "heavyTailDist[a,r] returns a discrete probability distribution on \
integers with mean r and right tail of the order 1/x^a", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DCM`heavyTailDist, {DCM`heavyTailDist[
         Condition[
          Pattern[DCM`Private`a, 
           Blank[]], DCM`Private`a > 1], 
         Condition[
          Pattern[DCM`Private`r, 
           Blank[]], DCM`Private`r > 0]] :> 
       Module[{DCM`Private`prob1, DCM`Private`pdf1, DCM`Private`mean1, 
          DCM`Private`p, DCM`Private`p1, DCM`Private`prob2, DCM`Private`pdf2},
          DCM`Private`prob1 = 
          ProbabilityDistribution[
           1/DCM`Private`x^(DCM`Private`a + 1), {
            DCM`Private`x, DCM`Private`r, Infinity, 1}, Method -> 
            "Normalize"]; DCM`Private`pdf1[
            Pattern[DCM`Private`x, 
             Blank[]]] = PDF[DCM`Private`prob1, DCM`Private`x]; 
         DCM`Private`mean1 = Mean[DCM`Private`prob1]; 
         DCM`Private`p1 = ReplaceAll[DCM`Private`p, 
            Part[
             
             Solve[(1 - DCM`Private`p) DCM`Private`mean1 == DCM`Private`r, 
              DCM`Private`p], 1]]; DCM`Private`pdf2[
            Pattern[DCM`Private`x, 
             Blank[]]] = Simplify[
            
            Piecewise[{{
              DCM`Private`p1, DCM`Private`x == 0}, {(1 - DCM`Private`p1) 
               DCM`Private`pdf1[DCM`Private`x], DCM`Private`x >= 
               DCM`Private`r}}]]; 
         DCM`Private`prob2 = ProbabilityDistribution[
            DCM`Private`pdf2[DCM`Private`x], {
            DCM`Private`x, 0, Infinity, 1}]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "DCM`heavyTailDist"], False]]], "Output",
 CellChangeTimes->{{3.826216463513528*^9, 3.826216494758862*^9}, 
   3.826216719998493*^9, 3.826216984909017*^9, 3.826217069000309*^9, 
   3.826217099444812*^9, 3.826217329441325*^9, 3.826217682856962*^9, 
   3.8262703752800627`*^9, 3.826273064581584*^9, 3.826276837044475*^9, {
   3.826295698985662*^9, 3.826295722279447*^9}, 3.8262961205239773`*^9, 
   3.826296166583787*^9, 3.826446441196458*^9, 3.826449956200563*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"593eefd0-605b-45d4-b3de-40928f57fde1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testheaveTailDist", "[", 
   RowBox[{"a0_", ",", "r0_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dist", ",", "pdf", ",", "x"}], "}"}], ",", 
    RowBox[{
     RowBox[{"dist", "=", 
      RowBox[{"heavyTailDist", "[", 
       RowBox[{"a0", ",", "r0"}], "]"}]}], ";", 
     RowBox[{
      RowBox[{"Assert", "[", 
       RowBox[{
        RowBox[{"Mean", "[", "dist", "]"}], "\[Equal]", "r0"}], "]"}], " ", 
      RowBox[{"(", 
       RowBox[{"pdf", "=", 
        RowBox[{"PDF", "[", 
         RowBox[{"dist", ",", "x"}], "]"}]}], ")"}]}], ";", 
     RowBox[{"Assert", "[", 
      RowBox[{"AsymptoticEqual", "[", 
       RowBox[{"pdf", ",", 
        FractionBox["1", 
         SuperscriptBox["x", 
          RowBox[{"a0", "+", "1"}]]], ",", 
        RowBox[{"x", "\[Rule]", "\[Infinity]"}]}], "]"}], "]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.826216502851787*^9, 3.826216511601516*^9}, {
   3.826216562814547*^9, 3.82621656521424*^9}, 3.82621701252437*^9, {
   3.82621736513236*^9, 3.8262174155289097`*^9}, {3.8262174545622797`*^9, 
   3.8262174697879133`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"98acd00a-a764-4b64-89c2-6ab336f7f293"],

Cell[BoxData[
 RowBox[{"testheaveTailDist", "[", 
  RowBox[{
   RowBox[{"3", "/", "2"}], ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.826217420748487*^9, 3.826217446161592*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"24aa476b-3da4-4ac6-bcb3-6b7ce932a96c"],

Cell[BoxData[
 RowBox[{"testheaveTailDist", "[", 
  RowBox[{
   RowBox[{"11", "/", "10"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.826217473999227*^9, 3.826217481989221*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"ec880ed3-0612-4306-bfb5-9f3f505494ca"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Degree sequence", "Chapter",
 CellChangeTimes->{{3.826215558190125*^9, 
  3.826215561130434*^9}},ExpressionUUID->"c7de4df1-ef24-4ec1-914a-\
8f2b47abda02"],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox["deg2Stub", 
  TraditionalForm]],ExpressionUUID->"e1d1a7d7-c51e-48a7-9bba-c570a48d76da"]], \
"Section",
 CellChangeTimes->{{3.8262176661871634`*^9, 
  3.82621766688345*^9}},ExpressionUUID->"aa8f7cf9-d7c2-41cf-900a-\
5cb1cf5058f6"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.826217650988956*^9, 3.8262176528351088`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"aa4eca13-f15d-450c-b434-89ce6f90de52"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "deg2Stub"}]], "Input",
 CellChangeTimes->{{3.826215730546048*^9, 3.826215745567576*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"782047c1-84bb-42e9-84aa-e02d36976adc"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"de2Stub[deg] turns a degree sequence into a stub \
(half-edge) sequence\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"deg2Stub", "[", 
                    RowBox[{"DCM`Private`degs_", "/;", 
                    RowBox[{"ArrayQ", "[", 
                    RowBox[{"DCM`Private`degs", ",", "1", ",", "IntegerQ"}], 
                    "]"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`nedges", ",", "DCM`Private`stubs", 
                    ",", 
                    RowBox[{"DCM`Private`m", "=", "0"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`nedges", "=", 
                    RowBox[{"Total", "[", "DCM`Private`degs", "]"}]}], ";", 
                    RowBox[{"DCM`Private`stubs", "=", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", "DCM`Private`nedges"}], "]"}]}], ";", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"DCM`Private`stubs", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"DCM`Private`m", "+", "1"}], ";;", 
                    RowBox[{"DCM`Private`m", "+", 
                    
                    RowBox[{"DCM`Private`degs", "\[LeftDoubleBracket]", 
                    "DCM`Private`i", "\[RightDoubleBracket]"}]}]}], 
                    "\[RightDoubleBracket]"}], "=", "DCM`Private`i"}], ";", 
                    RowBox[{"DCM`Private`m", "=", 
                    RowBox[{"DCM`Private`m", "+", 
                    
                    RowBox[{"DCM`Private`degs", "\[LeftDoubleBracket]", 
                    "DCM`Private`i", "\[RightDoubleBracket]"}]}]}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`i", ",", "1", ",", 
                    RowBox[{"Length", "[", "DCM`Private`degs", "]"}]}], 
                    "}"}]}], "]"}], ";", "DCM`Private`stubs"}]}], "]"}]}]}, {
                   " "}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`deg2Stub\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"de2Stub[deg] turns a degree sequence into a stub \
(half-edge) sequence\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "de2Stub[deg] turns a degree sequence into a stub (half-edge) sequence", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[DownValues, DCM`deg2Stub, {DCM`deg2Stub[
         Condition[
          Pattern[DCM`Private`degs, 
           Blank[]], 
          ArrayQ[DCM`Private`degs, 1, IntegerQ]]] :> 
       Module[{DCM`Private`nedges, DCM`Private`stubs, DCM`Private`m = 0}, 
         DCM`Private`nedges = Total[DCM`Private`degs]; 
         DCM`Private`stubs = ConstantArray[0, DCM`Private`nedges]; 
         Table[Part[DCM`Private`stubs, 
              Span[
              DCM`Private`m + 1, DCM`Private`m + 
               Part[DCM`Private`degs, DCM`Private`i]]] = DCM`Private`i; 
           DCM`Private`m = 
            DCM`Private`m + Part[DCM`Private`degs, DCM`Private`i], {
           DCM`Private`i, 1, 
            Length[DCM`Private`degs]}]; DCM`Private`stubs]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "DCM`deg2Stub"], False]]], "Output",
 CellChangeTimes->{{3.8262157354413967`*^9, 3.826215747483307*^9}, 
   3.826215880042314*^9, 3.82621591186047*^9, 3.8262159969860163`*^9, 
   3.826216074762706*^9, 3.826217068766348*^9, 3.826217099221918*^9, 
   3.826217329213676*^9, {3.826217658904112*^9, 3.826217670128338*^9}, 
   3.8262703779149933`*^9, 3.826273065165028*^9, {3.826295704810135*^9, 
   3.8262957276600943`*^9}, 3.826296168569388*^9, 3.826446442227738*^9, 
   3.826449961569931*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"cd0ad150-9bf1-4d57-8062-5179fe9fa7b5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"deg2Stub", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1.1", ",", "1"}], "}"}], "]"}], "\[Equal]", 
   RowBox[{"deg2Stub", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1.1", ",", "1"}], "}"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8262156700471163`*^9, 3.826215712946271*^9}, {
  3.8262160061965*^9, 3.82621601913597*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"657e753c-bb1b-49d9-a40b-2665e2a5ec2a"],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"deg2Stub", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "0", ",", "1"}], "}"}], "]"}], "\[Equal]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2", ",", "2", ",", "4"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.826216033580752*^9, 3.826216064532585*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"bb63935e-5de3-41da-96da-82851207a126"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox["findMaxDegree", TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"bc93b010-5555-4c77-be8d-2476e2254b33"]], \
"Section",
 CellChangeTimes->{{3.8262741490198307`*^9, 
  3.826274152793902*^9}},ExpressionUUID->"31ae4e00-b584-4077-82a6-\
93fffe8ad8d5"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.826274162414276*^9, 3.826274165281052*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"3d245877-f5b8-48b9-a8f4-322df8467958"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "findMaxDegree"}]], "Input",
 CellChangeTimes->{{3.8262742766457453`*^9, 3.8262742802259693`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"b18bd3cb-c2c3-4e04-b9c3-6e7df517dbc3"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"findMaxDegree[pdf,n,p] returns the approximate max \
degree of a graph with n vertices whose degree sequence has limit \
distribution pdf with cutoff probability p\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"findMaxDegree", "[", 
                    RowBox[{"DCM`Private`pdf_", ",", 
                    RowBox[{"DCM`Private`n_", "/;", 
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "DCM`Private`n", "]"}], "&&", 
                    RowBox[{"DCM`Private`n", "\[GreaterEqual]", "1"}]}]}], 
                    ",", 
                    RowBox[{"DCM`Private`p_", "/;", 
                    
                    RowBox[{"1", "\[GreaterEqual]", "DCM`Private`p", ">", 
                    "0"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"DCM`Private`deg", "=", "1"}], ",", 
                    RowBox[{"DCM`Private`p0", "=", "1"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DCM`Private`n", " ", "DCM`Private`p0"}], 
                    "\[GreaterEqual]", "DCM`Private`p"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`deg", "=", 
                    RowBox[{"DCM`Private`deg", "+", "1"}]}], ";", 
                    RowBox[{"DCM`Private`p0", "=", 
                    
                    RowBox[{"DCM`Private`pdf", "[", "DCM`Private`deg", 
                    "]"}]}], ";"}]}], "]"}], ";", "DCM`Private`deg"}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`findMaxDegree\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"findMaxDegree[pdf,n,p] returns the approximate max \
degree of a graph with n vertices whose degree sequence has limit \
distribution pdf with cutoff probability p\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "findMaxDegree[pdf,n,p] returns the approximate max degree of a graph \
with n vertices whose degree sequence has limit distribution pdf with cutoff \
probability p", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DCM`findMaxDegree, {DCM`findMaxDegree[
         Pattern[DCM`Private`pdf, 
          Blank[]], 
         Condition[
          Pattern[DCM`Private`n, 
           Blank[]], 
          And[
           IntegerQ[DCM`Private`n], DCM`Private`n >= 1]], 
         Condition[
          Pattern[DCM`Private`p, 
           Blank[]], 
          Inequality[1, GreaterEqual, DCM`Private`p, Greater, 0]]] :> 
       Module[{DCM`Private`deg = 1, DCM`Private`p0 = 1}, 
         While[DCM`Private`n DCM`Private`p0 >= DCM`Private`p, 
           DCM`Private`deg = DCM`Private`deg + 1; 
           DCM`Private`p0 = DCM`Private`pdf[DCM`Private`deg]; Null]; 
         DCM`Private`deg]}], "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> "DCM`findMaxDegree"], 
   False]]], "Output",
 CellChangeTimes->{
  3.82627428064158*^9, 3.826274330596355*^9, 3.826274433726672*^9, 
   3.826274517762092*^9, {3.8262784707636127`*^9, 3.826278493025136*^9}, {
   3.8262786001678257`*^9, 3.826278612874259*^9}, 3.8262786453582573`*^9, {
   3.8262957050737*^9, 3.8262957279152718`*^9}, 3.8262961689498987`*^9, 
   3.826446442446042*^9, 3.8264499618271914`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"a2f130d7-6785-4650-a114-4e5608e03b9e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a0", "=", 
   RowBox[{"3", "/", "2"}]}], ";", 
  RowBox[{"r0", "=", "2"}], ";", 
  RowBox[{"n1", "=", "10000"}], ";", 
  RowBox[{"p0", "=", 
   RowBox[{"1", "/", "3"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8262742218861427`*^9, 3.8262742274627037`*^9}, {
   3.826274462273374*^9, 3.826274464413982*^9}, 3.8262745149111853`*^9, {
   3.826278450686553*^9, 3.826278467450889*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"1f8eae1f-9b14-4214-8388-20855d156795"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dist", "=", 
  RowBox[{"DCM`heavyTailDist", "[", 
   RowBox[{"a0", ",", "r0"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.826274156022547*^9, 3.8262741774225893`*^9}, {
   3.826274210619326*^9, 3.8262742337442827`*^9}, {3.826278454343048*^9, 
   3.826278455080285*^9}, 3.826278596052751*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"dcc472ab-7dbf-4971-af06-b9d18090ab65"],

Cell[BoxData[
 RowBox[{"ProbabilityDistribution", "[", 
  RowBox[{
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {
          FractionBox["2", 
           RowBox[{
            SuperscriptBox["\[FormalX]", 
             RowBox[{"5", "/", "2"}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              RowBox[{"Zeta", "[", 
               FractionBox["3", "2"], "]"}]}], ")"}]}]], 
          RowBox[{"\[FormalX]", "\[GreaterEqual]", "2"}]},
         {
          FractionBox[
           RowBox[{"1", "+", 
            RowBox[{"Zeta", "[", 
             FractionBox["3", "2"], "]"}], "-", 
            RowBox[{"2", " ", 
             RowBox[{"Zeta", "[", 
              FractionBox["5", "2"], "]"}]}]}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{"Zeta", "[", 
             FractionBox["3", "2"], "]"}]}]], 
          RowBox[{"\[FormalX]", "\[Equal]", "0"}]},
         {"0", 
          TagBox["True",
           "PiecewiseDefault",
           AutoDelete->True]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}},
        Selectable->True]}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False,
    StripWrapperBoxes->True], ",", 
   RowBox[{"{", 
    RowBox[{"\[FormalX]", ",", "0", ",", "\[Infinity]", ",", "1"}], "}"}]}], 
  "]"}]], "Output",
 CellChangeTimes->{{3.826274216699535*^9, 3.8262742342079906`*^9}, 
   3.826274330683714*^9, 3.8262744338157263`*^9, 3.8262745178522463`*^9, {
   3.826278470792635*^9, 3.826278493062693*^9}, {3.826278592727831*^9, 
   3.826278612968011*^9}, 3.82627864544847*^9, {3.8262957051744337`*^9, 
   3.826295728001444*^9}, 3.826296169059065*^9, 3.826446442548999*^9, 
   3.826449961960478*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"a7cbb110-675a-41a8-a421-dfdff566b7b3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pdf", "[", "i_", "]"}], "=", 
  RowBox[{"PDF", "[", 
   RowBox[{"dist", ",", "i"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8262742394391203`*^9, 3.826274247288331*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"4507938d-88e1-46fe-9d51-eddc28d6b729"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        FractionBox["2", 
         RowBox[{
          SuperscriptBox["i", 
           RowBox[{"5", "/", "2"}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{"Zeta", "[", 
             FractionBox["3", "2"], "]"}]}], ")"}]}]], 
        RowBox[{"i", "\[GreaterEqual]", "2"}]},
       {
        FractionBox[
         RowBox[{"1", "+", 
          RowBox[{"Zeta", "[", 
           FractionBox["3", "2"], "]"}], "-", 
          RowBox[{"2", " ", 
           RowBox[{"Zeta", "[", 
            FractionBox["5", "2"], "]"}]}]}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          RowBox[{"Zeta", "[", 
           FractionBox["3", "2"], "]"}]}]], 
        RowBox[{"i", "\[Equal]", "0"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}},
      Selectable->True]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False,
  StripWrapperBoxes->True]], "Output",
 CellChangeTimes->{{3.826274247605859*^9, 3.826274266940399*^9}, 
   3.826274330705186*^9, 3.8262744338335*^9, 3.826274517873077*^9, {
   3.826278470819377*^9, 3.826278493087544*^9}, {3.826278588148602*^9, 
   3.8262786129905853`*^9}, 3.826278645474184*^9, {3.826295705194766*^9, 
   3.826295728024117*^9}, 3.826296169082142*^9, 3.82644644257066*^9, 
   3.826449962008923*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"304f32ff-40f6-4172-a0fd-a2e738ee650f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"nmax", "=", 
   RowBox[{"findMaxDegree", "[", 
    RowBox[{"pdf", ",", "n1", ",", "p0"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8262742699805813`*^9, 3.82627432121036*^9}, {
   3.82627443890128*^9, 3.826274468380261*^9}, {3.826278485198079*^9, 
   3.826278485692017*^9}, 3.826278623357524*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"95eff748-745a-4188-8055-45b79dd638f7"],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"n1", "*", 
    RowBox[{"pdf", "[", 
     RowBox[{"nmax", "-", "1"}], "]"}]}], "\[GreaterEqual]", "p0"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.826274486246129*^9, 3.8262744951992064`*^9}, {
  3.826278323173976*^9, 3.82627832329424*^9}, {3.8262784598844624`*^9, 
  3.8262784601307087`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"2130324b-dcb8-42eb-82e5-3b948a7f241d"],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"n1", "*", 
    RowBox[{"pdf", "[", "nmax", "]"}]}], "<", "p0"}], "]"}]], "Input",
 CellChangeTimes->{{3.826274447405177*^9, 3.826274508064136*^9}, {
  3.8262783270552673`*^9, 3.8262783272262373`*^9}, {3.826278463316724*^9, 
  3.8262784636254787`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"cd61a3ac-543c-4de0-9315-31a5146cc6eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox["pdf2Deg", TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"4963c3f2-f912-4163-ba01-b3f9f40a1d1e"]], \
"Section",
 CellChangeTimes->{{3.826271573447505*^9, 
  3.8262715830871*^9}},ExpressionUUID->"33b74e9c-9e9f-4957-a5a5-0f31eaa1c89d"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.826271585870421*^9, 3.8262715874846973`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"88da40f2-2104-4253-9686-a73e5cd865f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "pdf2Deg"}]], "Input",
 CellChangeTimes->{{3.826271589417405*^9, 3.826271592077277*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"e4e51fd5-0c02-4892-9ae8-5a66736aba34"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"pdf2Deg[pdf,n] creates a bi-degree sequence \
according to the limit bi-degree distribution pdf\\npdf2Deg[pdf,r,n,p] \
creates a bi-degree sequence for a graph with out-degree fixed to be r and \
in-degrees have distribution pdf and cutoff probability p for maximum \
degree\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"pdf2Deg", "[", 
                    RowBox[{"DCM`Private`pdf_", ",", 
                    RowBox[{"DCM`Private`n_", "/;", 
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "DCM`Private`n", "]"}], "&&", 
                    RowBox[{"DCM`Private`n", "\[GreaterEqual]", "1"}]}]}]}], 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`n1", ",", "DCM`Private`deglist", ",",
                     "DCM`Private`t", ",", "DCM`Private`i", ",", 
                    "DCM`Private`d", ",", "DCM`Private`nhead", ",", 
                    "DCM`Private`ntail", ",", "DCM`Private`diff", ",", 
                    "DCM`Private`heads", ",", "DCM`Private`tails"}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n1", "=", "DCM`Private`n"}], ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"{", "}"}]}], ";", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`t", "=", "0"}], ",", "True", ",", 
                    RowBox[{"DCM`Private`t", "++"}], ",", 
                    RowBox[{
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`i", "=", "0"}], ",", 
                    
                    RowBox[{"DCM`Private`i", "\[LessEqual]", 
                    "DCM`Private`t"}], ",", 
                    RowBox[{"DCM`Private`i", "++"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`d", "=", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{"DCM`Private`n", " ", 
                    RowBox[{"DCM`Private`pdf", "[", 
                    RowBox[{"DCM`Private`i", ",", 
                    RowBox[{"DCM`Private`t", "-", "DCM`Private`i"}]}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`d", ">", "0"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`d", "=", 
                    RowBox[{"Min", "[", 
                    RowBox[{"DCM`Private`d", ",", "DCM`Private`n1"}], "]"}]}],
                     ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{"DCM`Private`deglist", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`i", ",", 
                    RowBox[{"DCM`Private`t", "-", "DCM`Private`i"}]}], "}"}], 
                    ",", "DCM`Private`d"}], "]"}]}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`n1", "=", 
                    RowBox[{"DCM`Private`n1", "-", "DCM`Private`d"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`n1", "\[LessEqual]", "0"}], ",", 
                    RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "]"}]}]}], 
                    "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`n1", "\[LessEqual]", "0"}], ",", 
                    RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`heads", ",", "DCM`Private`tails"}], 
                    "}"}], "=", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    
                    RowBox[{"Transpose", "[", "DCM`Private`deglist", 
                    "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`nhead", ",", "DCM`Private`ntail"}], 
                    "}"}], "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"DCM`Private`deglist", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`diff", "=", 
                    RowBox[{"Abs", "[", 
                    RowBox[{"DCM`Private`nhead", "-", "DCM`Private`ntail"}], 
                    "]"}]}], ";", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`nhead", "<", "DCM`Private`ntail"}], 
                    ",", 
                    RowBox[{"DCM`Private`heads", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DCM`Private`heads", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ";;", "DCM`Private`diff"}], 
                    "\[RightDoubleBracket]"}], "+", "1"}], ",", 
                    RowBox[{"DCM`Private`heads", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"DCM`Private`diff", "+", "1"}], ";;", "All"}], 
                    "\[RightDoubleBracket]"}]}], "]"}]}], ",", 
                    RowBox[{"DCM`Private`nhead", ">", "DCM`Private`ntail"}], 
                    ",", 
                    RowBox[{"DCM`Private`tails", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DCM`Private`tails", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ";;", "DCM`Private`diff"}], 
                    "\[RightDoubleBracket]"}], "+", "1"}], ",", 
                    RowBox[{"DCM`Private`tails", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"DCM`Private`diff", "+", "1"}], ";;", "All"}], 
                    "\[RightDoubleBracket]"}]}], "]"}]}]}], "]"}], ";", 
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`heads", ",", "DCM`Private`tails"}], 
                    "}"}]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"pdf2Deg", "[", 
                    RowBox[{"DCM`Private`pdf_", ",", 
                    RowBox[{"DCM`Private`r__", "/;", 
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "DCM`Private`r", "]"}], "&&", 
                    RowBox[{"DCM`Private`r", "\[GreaterEqual]", "1"}]}]}], 
                    ",", 
                    RowBox[{"DCM`Private`n_", "/;", 
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "DCM`Private`n", "]"}], "&&", 
                    RowBox[{"DCM`Private`n", "\[GreaterEqual]", "1"}]}]}], 
                    ",", 
                    RowBox[{"DCM`Private`p_", "/;", 
                    
                    RowBox[{"0", "<", "DCM`Private`p", "\[LessEqual]", 
                    "1"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`maxdeg", ",", "DCM`Private`nedge", 
                    ",", "DCM`Private`d", ",", "DCM`Private`dn", ",", 
                    "DCM`Private`deglist"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`maxdeg", "=", 
                    RowBox[{"findMaxDegree", "[", 
                    
                    RowBox[{"DCM`Private`pdf", ",", "DCM`Private`n", ",", 
                    "DCM`Private`p"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`nedge", "=", 
                    RowBox[{"DCM`Private`r", " ", "DCM`Private`n"}]}], ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"{", "}"}]}], ";", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`d", "=", "DCM`Private`maxdeg"}], ",", 
                    RowBox[{"DCM`Private`d", "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"DCM`Private`d", "--"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`dn", "=", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{"DCM`Private`n", " ", 
                    RowBox[{"DCM`Private`pdf", "[", "DCM`Private`d", "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"DCM`Private`dn", "=", 
                    RowBox[{"Min", "[", 
                    RowBox[{"DCM`Private`dn", ",", 
                    RowBox[{"Floor", "[", 
                    FractionBox["DCM`Private`nedge", "DCM`Private`d"], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"DCM`Private`d", ",", "DCM`Private`dn"}], "]"}], 
                    ",", "DCM`Private`deglist"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`nedge", "-=", 
                    RowBox[{"DCM`Private`dn", " ", "DCM`Private`d"}]}]}]}], 
                    "]"}], ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"PadLeft", "[", 
                    RowBox[{"DCM`Private`deglist", ",", "DCM`Private`n"}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`nedge", ">", "0"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`deglist", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ";;", "DCM`Private`nedge"}], 
                    "\[RightDoubleBracket]"}], "+=", "1"}]}], "]"}], ";", 
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`deglist", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"DCM`Private`r", ",", "DCM`Private`n"}], "]"}]}], 
                    "}"}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`pdf2Deg\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"pdf2Deg[pdf,n] creates a bi-degree sequence \
according to the limit bi-degree distribution pdf\\npdf2Deg[pdf,r,n,p] \
creates a bi-degree sequence for a graph with out-degree fixed to be r and \
in-degrees have distribution pdf and cutoff probability p for maximum \
degree\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "pdf2Deg[pdf,n] creates a bi-degree sequence according to the limit \
bi-degree distribution pdf\npdf2Deg[pdf,r,n,p] creates a bi-degree sequence \
for a graph with out-degree fixed to be r and in-degrees have distribution \
pdf and cutoff probability p for maximum degree", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[DownValues, DCM`pdf2Deg, {DCM`pdf2Deg[
         Pattern[DCM`Private`pdf, 
          Blank[]], 
         Condition[
          Pattern[DCM`Private`n, 
           Blank[]], 
          And[
           IntegerQ[DCM`Private`n], DCM`Private`n >= 1]]] :> 
       Module[{DCM`Private`n1, DCM`Private`deglist, DCM`Private`t, 
          DCM`Private`i, DCM`Private`d, DCM`Private`nhead, DCM`Private`ntail, 
          DCM`Private`diff, DCM`Private`heads, DCM`Private`tails}, 
         DCM`Private`n1 = DCM`Private`n; DCM`Private`deglist = {}; 
         For[DCM`Private`t = 0, True, 
           Increment[DCM`Private`t], 
           For[DCM`Private`i = 0, DCM`Private`i <= DCM`Private`t, 
             Increment[DCM`Private`i], 
             DCM`Private`d = 
              Ceiling[DCM`Private`n 
                DCM`Private`pdf[
                 DCM`Private`i, DCM`Private`t - DCM`Private`i]]; 
             If[DCM`Private`d > 0, 
               DCM`Private`d = Min[DCM`Private`d, DCM`Private`n1]; 
               DCM`Private`deglist = Join[DCM`Private`deglist, 
                  
                  ConstantArray[{
                   DCM`Private`i, DCM`Private`t - DCM`Private`i}, 
                   DCM`Private`d]]; 
               DCM`Private`n1 = DCM`Private`n1 - DCM`Private`d; 
               If[DCM`Private`n1 <= 0, 
                 Break[]]]]; If[DCM`Private`n1 <= 0, 
             Break[]]]; {DCM`Private`heads, DCM`Private`tails} = (
           DCM`Private`deglist = Transpose[DCM`Private`deglist]); {
           DCM`Private`nhead, DCM`Private`ntail} = 
          Total[DCM`Private`deglist, {2}]; 
         DCM`Private`diff = Abs[DCM`Private`nhead - DCM`Private`ntail]; 
         Which[DCM`Private`nhead < DCM`Private`ntail, DCM`Private`heads = 
           Join[Part[DCM`Private`heads, 
               Span[1, DCM`Private`diff]] + 1, 
             Part[DCM`Private`heads, 
              Span[DCM`Private`diff + 1, All]]], DCM`Private`nhead > 
           DCM`Private`ntail, DCM`Private`tails = Join[Part[DCM`Private`tails, 
               Span[1, DCM`Private`diff]] + 1, 
             Part[DCM`Private`tails, 
              Span[DCM`Private`diff + 1, All]]]]; {
          DCM`Private`heads, DCM`Private`tails}], DCM`pdf2Deg[
         Pattern[DCM`Private`pdf, 
          Blank[]], 
         Condition[
          Pattern[DCM`Private`r, 
           BlankSequence[]], 
          And[
           IntegerQ[DCM`Private`r], DCM`Private`r >= 1]], 
         Condition[
          Pattern[DCM`Private`n, 
           Blank[]], 
          And[
           IntegerQ[DCM`Private`n], DCM`Private`n >= 1]], 
         Condition[
          Pattern[DCM`Private`p, 
           Blank[]], 
          Inequality[0, Less, DCM`Private`p, LessEqual, 1]]] :> 
       Module[{DCM`Private`maxdeg, DCM`Private`nedge, DCM`Private`d, 
          DCM`Private`dn, DCM`Private`deglist}, 
         DCM`Private`maxdeg = 
          DCM`findMaxDegree[DCM`Private`pdf, DCM`Private`n, DCM`Private`p]; 
         DCM`Private`nedge = DCM`Private`r DCM`Private`n; 
         DCM`Private`deglist = {}; 
         For[DCM`Private`d = DCM`Private`maxdeg, DCM`Private`d >= 2, 
           Decrement[DCM`Private`d], 
           DCM`Private`dn = 
            Ceiling[DCM`Private`n DCM`Private`pdf[DCM`Private`d]]; 
           DCM`Private`dn = Min[DCM`Private`dn, 
              Floor[DCM`Private`nedge/DCM`Private`d]]; 
           DCM`Private`deglist = Join[
              ConstantArray[DCM`Private`d, DCM`Private`dn], 
              DCM`Private`deglist]; 
           SubtractFrom[DCM`Private`nedge, DCM`Private`dn DCM`Private`d]]; 
         DCM`Private`deglist = PadLeft[DCM`Private`deglist, DCM`Private`n]; 
         If[DCM`Private`nedge > 0, 
           AddTo[
            Part[DCM`Private`deglist, 
             Span[1, DCM`Private`nedge]], 1]]; {DCM`Private`deglist, 
           ConstantArray[DCM`Private`r, DCM`Private`n]}]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "DCM`pdf2Deg"], False]]], "Output",
 CellChangeTimes->{{3.826271592945468*^9, 3.826271611630475*^9}, {
   3.82627236447616*^9, 3.826272377568907*^9}, 3.826272604947627*^9, 
   3.826272738898336*^9, 3.826272996364613*^9, 3.826273065379641*^9, {
   3.8262732669127502`*^9, 3.826273291158022*^9}, 3.8262737942768373`*^9, 
   3.826273833861238*^9, {3.826295705451645*^9, 3.826295728277451*^9}, 
   3.8262961692905273`*^9, 3.8264464427981443`*^9, 3.826449962336957*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"e4eb8314-1abd-47af-9663-0c7cb2b3fee2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{
  "pdf", ",", "dist", ",", "n1", ",", "stat", ",", "stat1", ",", "err1", ",", 
   "deglist"}], "]"}]], "Input",
 CellChangeTimes->{{3.8262716335802097`*^9, 3.826271635216906*^9}, {
  3.826271762445142*^9, 3.8262717629919243`*^9}, {3.8262738255755*^9, 
  3.826273840256338*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"f6827746-c883-46c3-8ed1-5fa61ac5d03d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pdf", "[", 
   RowBox[{"i_", ",", "j_"}], "]"}], ":=", 
  RowBox[{"Piecewise", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "4"], ",", 
        RowBox[{
         RowBox[{"i", "\[Equal]", "0"}], "&&", 
         RowBox[{"j", "\[Equal]", "2"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "4"], ",", 
        RowBox[{
         RowBox[{"i", "\[Equal]", "0"}], "&&", 
         RowBox[{"j", "\[Equal]", "3"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "4"], ",", 
        RowBox[{
         RowBox[{"i", "\[Equal]", "5"}], "&&", 
         RowBox[{"j", "\[Equal]", "2"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        FractionBox["1", "4"], ",", 
        RowBox[{
         RowBox[{"i", "\[Equal]", "5"}], "&&", 
         RowBox[{"j", "\[Equal]", "3"}]}]}], "}"}]}], "}"}], ",", "0"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.826271636331993*^9, 3.826271644586768*^9}, {
   3.826271692116844*^9, 3.8262717501533937`*^9}, {3.826272046771284*^9, 
   3.82627204866472*^9}, 3.826272478555862*^9, {3.826272947797845*^9, 
   3.826272950070788*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"2c962011-04d5-44d1-b125-17a476b90fc9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dist", "=", 
  RowBox[{"ProbabilityDistribution", "[", 
   RowBox[{
    RowBox[{"pdf", "[", 
     RowBox[{"i", ",", "j"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "0", ",", "\[Infinity]", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "0", ",", "\[Infinity]", ",", "1"}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.826271771062511*^9, 3.826271785423704*^9}, {
  3.8262719167064962`*^9, 3.826271949134975*^9}, {3.826272001310678*^9, 
  3.82627200684131*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"dd69799e-115e-4969-ada4-b25064da6fcd"],

Cell[BoxData[
 RowBox[{"ProbabilityDistribution", "[", 
  RowBox[{
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {
          FractionBox["1", "4"], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[FormalX]1", "\[Equal]", "0"}], "&&", 
             RowBox[{"\[FormalX]2", "\[Equal]", "2"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[FormalX]1", "\[Equal]", "0"}], "&&", 
             RowBox[{"\[FormalX]2", "\[Equal]", "3"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[FormalX]1", "\[Equal]", "5"}], "&&", 
             RowBox[{"\[FormalX]2", "\[Equal]", "2"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[FormalX]1", "\[Equal]", "5"}], "&&", 
             RowBox[{"\[FormalX]2", "\[Equal]", "3"}]}], ")"}]}]},
         {"0", 
          TagBox["True",
           "PiecewiseDefault",
           AutoDelete->True]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}},
        Selectable->True]}
     },
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False,
    StripWrapperBoxes->True], ",", 
   RowBox[{"{", 
    RowBox[{"\[FormalX]1", ",", "0", ",", "\[Infinity]", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\[FormalX]2", ",", "0", ",", "\[Infinity]", ",", "1"}], "}"}]}], 
  "]"}]], "Output",
 CellChangeTimes->{{3.826272007721052*^9, 3.826272050216208*^9}, {
   3.826272364514769*^9, 3.82627237761178*^9}, 3.82627260498525*^9, 
   3.826272738945712*^9, 3.826272957802047*^9, 3.8262729964115763`*^9, 
   3.8262730654400187`*^9, {3.826273266957849*^9, 3.826273291200509*^9}, 
   3.826273794315034*^9, 3.826273833907096*^9, {3.826295705483506*^9, 
   3.826295728311894*^9}, 3.826296169322034*^9, 3.826446442828704*^9, 
   3.826449962435103*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"2b9f65da-655f-4e2e-81ae-df710769041f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", "dist", "]"}]], "Input",
 CellChangeTimes->{{3.826272786896925*^9, 3.826272791874751*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"8e12e41d-58f8-4598-b056-1128a65f567e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["5", "2"], ",", 
   FractionBox["5", "2"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8262727927746763`*^9, {3.826272954174486*^9, 3.826272959274036*^9}, 
   3.8262729968006887`*^9, 3.826273065834787*^9, {3.826273267342066*^9, 
   3.826273291609674*^9}, 3.826273794701252*^9, 3.826273834296316*^9, {
   3.826295706151779*^9, 3.826295728735256*^9}, 3.8262961699203243`*^9, 
   3.826446443358334*^9, 3.8264499635539827`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"e75b5ae8-d32a-46d1-a95f-82099fd1821c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"pdf2Deg", "[", 
    RowBox[{"pdf", ",", "8"}], "]"}], "==", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0", ",", "0", ",", "0", ",", "0", ",", "5", ",", "5", ",", "5", ",", 
       "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "2", ",", "2", ",", "3", ",", "3", ",", "2", ",", "2", ",", "3", ",", 
       "3"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.826272322866781*^9, 3.82627233083626*^9}, {
   3.8262724184947977`*^9, 3.8262724187186947`*^9}, 3.826272453363037*^9, {
   3.826273003799028*^9, 3.826273021688559*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"7d3249de-36e0-400a-96ca-43cf40d1ed8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"n1", "=", "100015"}], ";"}]], "Input",
 CellChangeTimes->{{3.826273346732007*^9, 3.826273360982584*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"7b514866-dd08-479d-85e4-b7b581093a88"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deglist", " ", "=", " ", 
   RowBox[{"pdf2Deg", "[", 
    RowBox[{"pdf", ",", "n1"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.82627303251633*^9, 3.826273045022056*^9}, {
  3.826273088836934*^9, 3.826273093026259*^9}, {3.8262731235433197`*^9, 
  3.826273142646058*^9}, {3.826273286130344*^9, 3.826273286442465*^9}, {
  3.8262733641822166`*^9, 3.82627336432038*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"428b809f-00a9-400d-ab71-16f3ca5e7fb6"],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{"Equal", "@@", 
   RowBox[{"Total", "/@", "deglist"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8262730728889914`*^9, 3.826273118489406*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"7c9df46e-2011-4cc6-921f-55425aa00bd5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"stat", "=", 
  RowBox[{
   RowBox[{"Transpose", "[", "deglist", "]"}], "//", "Tally"}]}]], "Input",
 CellChangeTimes->{{3.826273225615251*^9, 3.8262732723966713`*^9}, {
  3.8262733900240297`*^9, 3.8262733916718388`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"4a439703-6aae-407f-9654-60cb2c773a5c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "2"}], "}"}], ",", "25002"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "3"}], "}"}], ",", "25004"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "2"}], "}"}], ",", "25004"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "3"}], "}"}], ",", "25003"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8262732353130903`*^9, 3.82627329172003*^9}, {
   3.826273375297757*^9, 3.826273392167227*^9}, 3.826273454888445*^9, 
   3.826273794810281*^9, 3.826273834414386*^9, {3.8262957063568983`*^9, 
   3.826295728921892*^9}, 3.8262961701261377`*^9, 3.826446443508704*^9, 
   3.8264499639615173`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"e4a772b2-2cd8-4567-84db-7c2a3076446c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"stat1", "=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     FractionBox[
      RowBox[{"#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
      "n1"], "&"}], ")"}], "/@", "stat"}]}]], "Input",
 CellChangeTimes->{{3.826273686594843*^9, 3.8262736967643557`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"7cb4c047-a1dc-4379-8177-d4eda8670c31"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["2", "100015"], ",", 
   FractionBox["25002", "100015"], ",", 
   FractionBox["25004", "100015"], ",", 
   FractionBox["25004", "100015"], ",", 
   FractionBox["25003", "100015"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.826273697454647*^9, 3.826273794828636*^9, 3.826273834435873*^9, {
   3.8262957063801603`*^9, 3.826295728943912*^9}, 3.826296170150498*^9, 
   3.826446443529454*^9, 3.826449964007707*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"25035332-2110-4133-bfbb-e371c7066ef5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"err1", "=", 
   RowBox[{"10", "*", 
    SuperscriptBox["n1", 
     RowBox[{"-", "1"}]]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.826273737115411*^9, 3.8262737438892517`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"fd6afb94-f36c-4a77-b4b1-965e5f5d50fd"],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{"And", "@@", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "<", "err1"}], "||", 
        RowBox[{
         RowBox[{"Abs", "[", 
          RowBox[{"#", "-", 
           RowBox[{"1", "/", "4"}]}], "]"}], "<", "err1"}]}], "&"}], ")"}], "/@",
      "stat1"}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8262737057757463`*^9, 3.826273782025593*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"33a0958b-b8e1-416e-a0be-e61edff97d69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox["pdf2Deg", TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"8029675d-9108-4f74-862f-dd5b3a9b4e5a"]], \
"Section",
 CellChangeTimes->{{3.826271573447505*^9, 
  3.8262715830871*^9}},ExpressionUUID->"f90c4914-7576-4fd1-a9a8-4c30814a1ce7"],

Cell[CellGroupData[{

Cell["Test", "Subsection",
 CellChangeTimes->{{3.826277476004231*^9, 
  3.826277490184147*^9}},ExpressionUUID->"c2510eaf-8c66-4b28-8094-\
35c76762c8d5"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.826271585870421*^9, 3.8262715874846973`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"13b18416-73fd-4055-afb5-78eb234b37b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "pdf2Deg"}]], "Input",
 CellChangeTimes->{{3.826271589417405*^9, 3.826271592077277*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"6a62949d-84da-4cbd-98da-7015a7f9a90a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"pdf2Deg[pdf,n] creates a bi-degree sequence \
according to the limit bi-degree distribution pdf\\npdf2Deg[pdf,r,n,p] \
creates a bi-degree sequence for a graph with out-degree fixed to be r and \
in-degrees have distribution pdf and cutoff probability p for maximum \
degree\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"pdf2Deg", "[", 
                    RowBox[{"DCM`Private`pdf_", ",", 
                    RowBox[{"DCM`Private`n_", "/;", 
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "DCM`Private`n", "]"}], "&&", 
                    RowBox[{"DCM`Private`n", "\[GreaterEqual]", "1"}]}]}]}], 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`n1", ",", "DCM`Private`deglist", ",",
                     "DCM`Private`t", ",", "DCM`Private`i", ",", 
                    "DCM`Private`d", ",", "DCM`Private`nhead", ",", 
                    "DCM`Private`ntail", ",", "DCM`Private`diff", ",", 
                    "DCM`Private`heads", ",", "DCM`Private`tails"}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n1", "=", "DCM`Private`n"}], ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"{", "}"}]}], ";", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`t", "=", "0"}], ",", "True", ",", 
                    RowBox[{"DCM`Private`t", "++"}], ",", 
                    RowBox[{
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`i", "=", "0"}], ",", 
                    
                    RowBox[{"DCM`Private`i", "\[LessEqual]", 
                    "DCM`Private`t"}], ",", 
                    RowBox[{"DCM`Private`i", "++"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`d", "=", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{"DCM`Private`n", " ", 
                    RowBox[{"DCM`Private`pdf", "[", 
                    RowBox[{"DCM`Private`i", ",", 
                    RowBox[{"DCM`Private`t", "-", "DCM`Private`i"}]}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`d", ">", "0"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`d", "=", 
                    RowBox[{"Min", "[", 
                    RowBox[{"DCM`Private`d", ",", "DCM`Private`n1"}], "]"}]}],
                     ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{"DCM`Private`deglist", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`i", ",", 
                    RowBox[{"DCM`Private`t", "-", "DCM`Private`i"}]}], "}"}], 
                    ",", "DCM`Private`d"}], "]"}]}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`n1", "=", 
                    RowBox[{"DCM`Private`n1", "-", "DCM`Private`d"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`n1", "\[LessEqual]", "0"}], ",", 
                    RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "]"}]}]}], 
                    "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`n1", "\[LessEqual]", "0"}], ",", 
                    RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`heads", ",", "DCM`Private`tails"}], 
                    "}"}], "=", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    
                    RowBox[{"Transpose", "[", "DCM`Private`deglist", 
                    "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`nhead", ",", "DCM`Private`ntail"}], 
                    "}"}], "=", 
                    RowBox[{"Total", "[", 
                    RowBox[{"DCM`Private`deglist", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`diff", "=", 
                    RowBox[{"Abs", "[", 
                    RowBox[{"DCM`Private`nhead", "-", "DCM`Private`ntail"}], 
                    "]"}]}], ";", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`nhead", "<", "DCM`Private`ntail"}], 
                    ",", 
                    RowBox[{"DCM`Private`heads", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DCM`Private`heads", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ";;", "DCM`Private`diff"}], 
                    "\[RightDoubleBracket]"}], "+", "1"}], ",", 
                    RowBox[{"DCM`Private`heads", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"DCM`Private`diff", "+", "1"}], ";;", "All"}], 
                    "\[RightDoubleBracket]"}]}], "]"}]}], ",", 
                    RowBox[{"DCM`Private`nhead", ">", "DCM`Private`ntail"}], 
                    ",", 
                    RowBox[{"DCM`Private`tails", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DCM`Private`tails", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ";;", "DCM`Private`diff"}], 
                    "\[RightDoubleBracket]"}], "+", "1"}], ",", 
                    RowBox[{"DCM`Private`tails", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"DCM`Private`diff", "+", "1"}], ";;", "All"}], 
                    "\[RightDoubleBracket]"}]}], "]"}]}]}], "]"}], ";", 
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`heads", ",", "DCM`Private`tails"}], 
                    "}"}]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"pdf2Deg", "[", 
                    RowBox[{"DCM`Private`pdf_", ",", 
                    RowBox[{"DCM`Private`r__", "/;", 
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "DCM`Private`r", "]"}], "&&", 
                    RowBox[{"DCM`Private`r", "\[GreaterEqual]", "1"}]}]}], 
                    ",", 
                    RowBox[{"DCM`Private`n_", "/;", 
                    RowBox[{
                    RowBox[{"IntegerQ", "[", "DCM`Private`n", "]"}], "&&", 
                    RowBox[{"DCM`Private`n", "\[GreaterEqual]", "1"}]}]}], 
                    ",", 
                    RowBox[{"DCM`Private`p_", "/;", 
                    
                    RowBox[{"0", "<", "DCM`Private`p", "\[LessEqual]", 
                    "1"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`maxdeg", ",", "DCM`Private`nedge", 
                    ",", "DCM`Private`d", ",", "DCM`Private`dn", ",", 
                    "DCM`Private`deglist"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`maxdeg", "=", 
                    RowBox[{"findMaxDegree", "[", 
                    
                    RowBox[{"DCM`Private`pdf", ",", "DCM`Private`n", ",", 
                    "DCM`Private`p"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`nedge", "=", 
                    RowBox[{"DCM`Private`r", " ", "DCM`Private`n"}]}], ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"{", "}"}]}], ";", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`d", "=", "DCM`Private`maxdeg"}], ",", 
                    RowBox[{"DCM`Private`d", "\[GreaterEqual]", "2"}], ",", 
                    RowBox[{"DCM`Private`d", "--"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`dn", "=", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{"DCM`Private`n", " ", 
                    RowBox[{"DCM`Private`pdf", "[", "DCM`Private`d", "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"DCM`Private`dn", "=", 
                    RowBox[{"Min", "[", 
                    RowBox[{"DCM`Private`dn", ",", 
                    RowBox[{"Floor", "[", 
                    FractionBox["DCM`Private`nedge", "DCM`Private`d"], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"DCM`Private`d", ",", "DCM`Private`dn"}], "]"}], 
                    ",", "DCM`Private`deglist"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`nedge", "-=", 
                    RowBox[{"DCM`Private`dn", " ", "DCM`Private`d"}]}]}]}], 
                    "]"}], ";", 
                    RowBox[{"DCM`Private`deglist", "=", 
                    RowBox[{"PadLeft", "[", 
                    RowBox[{"DCM`Private`deglist", ",", "DCM`Private`n"}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`nedge", ">", "0"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`deglist", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ";;", "DCM`Private`nedge"}], 
                    "\[RightDoubleBracket]"}], "+=", "1"}]}], "]"}], ";", 
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`deglist", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"DCM`Private`r", ",", "DCM`Private`n"}], "]"}]}], 
                    "}"}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`pdf2Deg\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"pdf2Deg[pdf,n] creates a bi-degree sequence \
according to the limit bi-degree distribution pdf\\npdf2Deg[pdf,r,n,p] \
creates a bi-degree sequence for a graph with out-degree fixed to be r and \
in-degrees have distribution pdf and cutoff probability p for maximum \
degree\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "pdf2Deg[pdf,n] creates a bi-degree sequence according to the limit \
bi-degree distribution pdf\npdf2Deg[pdf,r,n,p] creates a bi-degree sequence \
for a graph with out-degree fixed to be r and in-degrees have distribution \
pdf and cutoff probability p for maximum degree", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[DownValues, DCM`pdf2Deg, {DCM`pdf2Deg[
         Pattern[DCM`Private`pdf, 
          Blank[]], 
         Condition[
          Pattern[DCM`Private`n, 
           Blank[]], 
          And[
           IntegerQ[DCM`Private`n], DCM`Private`n >= 1]]] :> 
       Module[{DCM`Private`n1, DCM`Private`deglist, DCM`Private`t, 
          DCM`Private`i, DCM`Private`d, DCM`Private`nhead, DCM`Private`ntail, 
          DCM`Private`diff, DCM`Private`heads, DCM`Private`tails}, 
         DCM`Private`n1 = DCM`Private`n; DCM`Private`deglist = {}; 
         For[DCM`Private`t = 0, True, 
           Increment[DCM`Private`t], 
           For[DCM`Private`i = 0, DCM`Private`i <= DCM`Private`t, 
             Increment[DCM`Private`i], 
             DCM`Private`d = 
              Ceiling[DCM`Private`n 
                DCM`Private`pdf[
                 DCM`Private`i, DCM`Private`t - DCM`Private`i]]; 
             If[DCM`Private`d > 0, 
               DCM`Private`d = Min[DCM`Private`d, DCM`Private`n1]; 
               DCM`Private`deglist = Join[DCM`Private`deglist, 
                  
                  ConstantArray[{
                   DCM`Private`i, DCM`Private`t - DCM`Private`i}, 
                   DCM`Private`d]]; 
               DCM`Private`n1 = DCM`Private`n1 - DCM`Private`d; 
               If[DCM`Private`n1 <= 0, 
                 Break[]]]]; If[DCM`Private`n1 <= 0, 
             Break[]]]; {DCM`Private`heads, DCM`Private`tails} = (
           DCM`Private`deglist = Transpose[DCM`Private`deglist]); {
           DCM`Private`nhead, DCM`Private`ntail} = 
          Total[DCM`Private`deglist, {2}]; 
         DCM`Private`diff = Abs[DCM`Private`nhead - DCM`Private`ntail]; 
         Which[DCM`Private`nhead < DCM`Private`ntail, DCM`Private`heads = 
           Join[Part[DCM`Private`heads, 
               Span[1, DCM`Private`diff]] + 1, 
             Part[DCM`Private`heads, 
              Span[DCM`Private`diff + 1, All]]], DCM`Private`nhead > 
           DCM`Private`ntail, DCM`Private`tails = Join[Part[DCM`Private`tails, 
               Span[1, DCM`Private`diff]] + 1, 
             Part[DCM`Private`tails, 
              Span[DCM`Private`diff + 1, All]]]]; {
          DCM`Private`heads, DCM`Private`tails}], DCM`pdf2Deg[
         Pattern[DCM`Private`pdf, 
          Blank[]], 
         Condition[
          Pattern[DCM`Private`r, 
           BlankSequence[]], 
          And[
           IntegerQ[DCM`Private`r], DCM`Private`r >= 1]], 
         Condition[
          Pattern[DCM`Private`n, 
           Blank[]], 
          And[
           IntegerQ[DCM`Private`n], DCM`Private`n >= 1]], 
         Condition[
          Pattern[DCM`Private`p, 
           Blank[]], 
          Inequality[0, Less, DCM`Private`p, LessEqual, 1]]] :> 
       Module[{DCM`Private`maxdeg, DCM`Private`nedge, DCM`Private`d, 
          DCM`Private`dn, DCM`Private`deglist}, 
         DCM`Private`maxdeg = 
          DCM`findMaxDegree[DCM`Private`pdf, DCM`Private`n, DCM`Private`p]; 
         DCM`Private`nedge = DCM`Private`r DCM`Private`n; 
         DCM`Private`deglist = {}; 
         For[DCM`Private`d = DCM`Private`maxdeg, DCM`Private`d >= 2, 
           Decrement[DCM`Private`d], 
           DCM`Private`dn = 
            Ceiling[DCM`Private`n DCM`Private`pdf[DCM`Private`d]]; 
           DCM`Private`dn = Min[DCM`Private`dn, 
              Floor[DCM`Private`nedge/DCM`Private`d]]; 
           DCM`Private`deglist = Join[
              ConstantArray[DCM`Private`d, DCM`Private`dn], 
              DCM`Private`deglist]; 
           SubtractFrom[DCM`Private`nedge, DCM`Private`dn DCM`Private`d]]; 
         DCM`Private`deglist = PadLeft[DCM`Private`deglist, DCM`Private`n]; 
         If[DCM`Private`nedge > 0, 
           AddTo[
            Part[DCM`Private`deglist, 
             Span[1, DCM`Private`nedge]], 1]]; {DCM`Private`deglist, 
           ConstantArray[DCM`Private`r, DCM`Private`n]}]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "DCM`pdf2Deg"], False]]], "Output",
 CellChangeTimes->{{3.826271592945468*^9, 3.826271611630475*^9}, {
   3.82627236447616*^9, 3.826272377568907*^9}, 3.826272604947627*^9, 
   3.826272738898336*^9, 3.826272996364613*^9, 3.826273065379641*^9, {
   3.8262732669127502`*^9, 3.826273291158022*^9}, 3.8262737942768373`*^9, {
   3.8262748841475477`*^9, 3.826274904212628*^9}, 3.826274964577943*^9, 
   3.826275015674839*^9, {3.826275047652072*^9, 3.826275072678179*^9}, {
   3.826275270941722*^9, 3.826275299704936*^9}, 3.826275409489431*^9, 
   3.8262754590939217`*^9, {3.826275542625313*^9, 3.82627556385275*^9}, 
   3.826275626685567*^9, 3.826275686552907*^9, {3.826275767884501*^9, 
   3.82627578240695*^9}, {3.8262761043636723`*^9, 3.8262761194708033`*^9}, 
   3.826276253785345*^9, 3.826276288903654*^9, 3.826276499615527*^9, 
   3.826276559860434*^9, 3.826276848326911*^9, {3.8262771732115707`*^9, 
   3.826277188818358*^9}, 3.826277580118004*^9, 3.826277824721937*^9, 
   3.8262779075459146`*^9, 3.8262781011686*^9, 3.826278981234746*^9, 
   3.826280457835175*^9, {3.8262957066218987`*^9, 3.8262957291787977`*^9}, 
   3.826296170426051*^9, 3.826446443753953*^9, 3.82644996441706*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"65ecb72c-9ef3-45a2-b32f-1a15aeef6018"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a0", "=", 
   RowBox[{"3", "/", "2"}]}], ";", 
  RowBox[{"r0", "=", "2"}], ";", 
  RowBox[{"n1", "=", 
   RowBox[{"5", "*", 
    RowBox[{"10", "^", "3"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8262742218861427`*^9, 3.8262742274627037`*^9}, {
   3.826274462273374*^9, 3.826274464413982*^9}, 3.8262745149111853`*^9, 
   3.8262749012289057`*^9, {3.826275022475646*^9, 3.826275037054164*^9}, 
   3.826275069228292*^9, {3.826275259810742*^9, 3.826275262355405*^9}, 
   3.826275296350575*^9, {3.826275403241461*^9, 3.826275403526606*^9}, {
   3.826275616035963*^9, 3.826275616232773*^9}, {3.826275681499114*^9, 
   3.8262756829298067`*^9}, {3.8262757631449347`*^9, 3.826275778196994*^9}, {
   3.826276100512224*^9, 3.826276116458338*^9}, {3.82627624973669*^9, 
   3.826276250066045*^9}, 3.826276284354514*^9, {3.8262764955717916`*^9, 
   3.826276496302128*^9}, {3.826277184968917*^9, 3.826277185392218*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"f681e5e7-3504-4fa0-96ae-d6b5408fb007"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dist", "=", 
   RowBox[{"heavyTailDist", "[", 
    RowBox[{"a0", ",", "r0"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.826274156022547*^9, 3.8262741774225893`*^9}, {
  3.826274210619326*^9, 3.8262742337442827`*^9}, {3.826274876323678*^9, 
  3.826274878015088*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"00b237ec-c0bf-456d-bfca-6ac0335e7730"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pdf", "[", "i_", "]"}], "=", 
  RowBox[{"PDF", "[", 
   RowBox[{"dist", ",", "i"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8262742394391203`*^9, 3.826274247288331*^9}, 
   3.8262756240479717`*^9, 3.826275788166767*^9},
 CellLabel->"In[39]:=",ExpressionUUID->"b9247592-46d3-47d6-9aca-6ccf9fc00ef4"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        FractionBox["2", 
         RowBox[{
          SuperscriptBox["i", 
           RowBox[{"5", "/", "2"}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{"Zeta", "[", 
             FractionBox["3", "2"], "]"}]}], ")"}]}]], 
        RowBox[{"i", "\[GreaterEqual]", "2"}]},
       {
        FractionBox[
         RowBox[{"1", "+", 
          RowBox[{"Zeta", "[", 
           FractionBox["3", "2"], "]"}], "-", 
          RowBox[{"2", " ", 
           RowBox[{"Zeta", "[", 
            FractionBox["5", "2"], "]"}]}]}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          RowBox[{"Zeta", "[", 
           FractionBox["3", "2"], "]"}]}]], 
        RowBox[{"i", "\[Equal]", "0"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}},
      Selectable->True]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False,
  StripWrapperBoxes->True]], "Output",
 CellChangeTimes->{
  3.826275788716586*^9, {3.8262761044537153`*^9, 3.826276119558958*^9}, 
   3.826276253888382*^9, 3.826276288986189*^9, 3.826276499704458*^9, 
   3.826276559951385*^9, 3.826276848426579*^9, {3.8262771732999687`*^9, 
   3.8262771889018307`*^9}, 3.826277580221191*^9, 3.826277824829329*^9, 
   3.826277907637941*^9, 3.826278101267991*^9, 3.8262789813495626`*^9, 
   3.826280457938422*^9, {3.8262957067135572`*^9, 3.826295729277809*^9}, 
   3.82629617055725*^9, 3.8264464438503447`*^9, 3.826449964764646*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"69426469-4eed-46e1-b4d9-d2e08d61ad7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"pdf", "[", "0", "]"}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.8262768717625437`*^9, 3.826276875558115*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"2e81a8c3-1ec4-47d9-863c-f6c2a35b5544"],

Cell[BoxData["0.5764171692040322`"], "Output",
 CellChangeTimes->{
  3.826276875865595*^9, {3.826277173315324*^9, 3.826277188916131*^9}, 
   3.8262775802460623`*^9, 3.8262778248588*^9, 3.82627790766284*^9, 
   3.826278101296814*^9, 3.826278981386291*^9, 3.826280457967578*^9, {
   3.826295706737215*^9, 3.826295729302086*^9}, 3.826296170582036*^9, 
   3.826446443869012*^9, 3.826449964818371*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"28751e42-061f-454f-be1f-18eca31663b9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"deglist", "=", 
   RowBox[{"pdf2Deg", "[", 
    RowBox[{"pdf", ",", "r0", ",", "n1", ",", 
     RowBox[{"1", "/", "5"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.826274905563538*^9, 3.8262749492828693`*^9}, {
   3.826275029922192*^9, 3.8262750612741747`*^9}, 3.826275302557918*^9, 
   3.82627541732942*^9, 3.826275618688464*^9, {3.826278974188325*^9, 
   3.826278975821745*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"5207bace-337e-4182-9106-9d3ee844fe86"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Assert", "[", 
      RowBox[{"#1", "\[Equal]", "n1"}], "]"}], "&"}], ")"}], "/@", 
   RowBox[{"Length", "/@", "deglist"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.826275062751588*^9, 3.826275163920487*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"b82cf851-3b33-4396-bc4f-df4e2c97c2bb"],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{"Equal", "@@", 
   RowBox[{"Total", "/@", "deglist"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.826275174426778*^9, 3.8262751813134317`*^9}, {
  3.826275570636683*^9, 3.826275578724928*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"383a4bcf-e366-42a0-ba34-12a172c11842"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["DCM", "Chapter",
 CellChangeTimes->{{3.826284647061893*^9, 
  3.8262846499658613`*^9}},ExpressionUUID->"8d1f8d91-9494-4de1-ab4b-\
52a4e783df2a"],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox["makeDCM", TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"300ef3f1-5283-42b3-b59d-31f3aabd6349"]], \
"Section",
 CellChangeTimes->{{3.826280558745675*^9, 
  3.826280565072413*^9}},ExpressionUUID->"a45f5cce-952b-427f-ae54-\
210b8dc398c6"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.8262805675281887`*^9, 3.826280569538549*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"6862bb84-7c40-4200-a6d5-edcf704aaa01"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "makeDCM"}]], "Input",
 CellChangeTimes->{{3.8262805708255*^9, 3.826280573192183*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"10de13c2-0bb3-4726-9cb0-aec76719c97b"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"makeDCM[deglist] create a random directed model \
with bi-degree sequences indeg, outdeg\\nmakeDCM[n,heads,tails] create a \
random directed model with stub-list heads and tails\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"makeDCM", "[", "DCM`Private`deglist_", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`heads", ",", "DCM`Private`tails"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`heads", ",", "DCM`Private`tails"}], 
                    "}"}], "=", 
                    RowBox[{"deg2Stub", "/@", "DCM`Private`deglist"}]}], ";", 
                    
                    RowBox[{"makeDCM", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    
                    RowBox[{"DCM`Private`deglist", "\[LeftDoubleBracket]", 
                    "1", "\[RightDoubleBracket]"}], "]"}], ",", 
                    "DCM`Private`heads", ",", "DCM`Private`tails"}], 
                    "]"}]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"makeDCM", "[", 
                    
                    RowBox[{
                    "DCM`Private`n_Integer", ",", "DCM`Private`heads_List", 
                    ",", "DCM`Private`tails_List"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Graph", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "DCM`Private`n", "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"DCM`Private`tails", "\[DirectedEdge]", 
                    RowBox[{"RandomSample", "[", "DCM`Private`heads", "]"}]}],
                     "]"}]}], "]"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`makeDCM\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"makeDCM[deglist] create a random directed model \
with bi-degree sequences indeg, outdeg\\nmakeDCM[n,heads,tails] create a \
random directed model with stub-list heads and tails\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "makeDCM[deglist] create a random directed model with bi-degree sequences \
indeg, outdeg\nmakeDCM[n,heads,tails] create a random directed model with \
stub-list heads and tails", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[DownValues, DCM`makeDCM, {DCM`makeDCM[
         Pattern[DCM`Private`deglist, 
          Blank[]]] :> 
       Module[{DCM`Private`heads, 
          DCM`Private`tails}, {DCM`Private`heads, DCM`Private`tails} = 
          Map[DCM`deg2Stub, DCM`Private`deglist]; DCM`makeDCM[
           Length[
            Part[DCM`Private`deglist, 1]], DCM`Private`heads, 
           DCM`Private`tails]], DCM`makeDCM[
         Pattern[DCM`Private`n, 
          Blank[Integer]], 
         Pattern[DCM`Private`heads, 
          Blank[List]], 
         Pattern[DCM`Private`tails, 
          Blank[List]]] :> Module[{}, 
         Graph[
          Range[DCM`Private`n], 
          Thread[
           DirectedEdge[DCM`Private`tails, 
            RandomSample[DCM`Private`heads]]]]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "DCM`makeDCM"], False]]], "Output",
 CellChangeTimes->{
  3.826280573689296*^9, 3.826280727311719*^9, {3.826281137625821*^9, 
   3.826281165724897*^9}, {3.8262825410602303`*^9, 3.8262825639039793`*^9}, 
   3.826283443395731*^9, 3.826284325473001*^9, 3.826285231865952*^9, 
   3.826285330359457*^9, 3.826295733502087*^9, 3.8262961708510723`*^9, 
   3.826446444089326*^9, 3.826449976438034*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"1e8f6f93-90a7-4729-92ed-63cf078a9c29"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"outdeg", "=", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2", ",", "2"}], "}"}]}], ";", 
  RowBox[{"indeg", "=", 
   RowBox[{"{", 
    RowBox[{"0", ",", "4", ",", "3", ",", "2"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8262809628023453`*^9, 3.826280972497178*^9}, {
  3.8262826143814983`*^9, 3.8262826413995*^9}, {3.826283348573351*^9, 
  3.8262834212517643`*^9}, {3.8262839516809263`*^9, 3.826283955459526*^9}, {
  3.826284351691822*^9, 3.8262843555497637`*^9}, {3.826285226050087*^9, 
  3.826285228703741*^9}, {3.826285323579739*^9, 3.8262853259935093`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"9c047c1c-2f75-40ad-8ca4-24ff469d8c26"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deglist", "=", 
   RowBox[{"{", 
    RowBox[{"indeg", ",", "outdeg"}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.826280631635049*^9, 3.826280654173462*^9}, {
  3.8262808471280613`*^9, 3.826280855003817*^9}, {3.826280961750827*^9, 
  3.826280978717813*^9}, {3.826282621870804*^9, 3.826282644768108*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"9dc8105b-c9df-4317-9b8d-d77ba9cd8bd5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", " ", "=", 
   RowBox[{"makeDCM", "[", "deglist", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.826280658672695*^9, 3.8262806667072363`*^9}, {
   3.826280735195272*^9, 3.8262807372737103`*^9}, {3.8262811485365257`*^9, 
   3.8262811500405807`*^9}, 3.8262826490363007`*^9},
 CellLabel->"In[48]:=",ExpressionUUID->"a063f1c2-3207-4142-a9bf-cf31840c618f"],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"VertexInDegree", "[", "g", "]"}], "\[Equal]", "indeg"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8262825828450613`*^9, 3.826282629814354*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"79e2acf2-ac3f-44ae-a04e-faa9c4fef5f1"],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"VertexOutDegree", "[", "g", "]"}], "\[Equal]", "outdeg"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.826282634942338*^9, 3.826282657624004*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"b928fa8b-6be6-4c10-bc63-8962feae27bb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox["transitProbM", TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"819f8dfe-db58-47f2-a0f5-33ecadbf81cd"]], \
"Section",
 CellChangeTimes->{{3.826282698469857*^9, 
  3.826282710402347*^9}},ExpressionUUID->"8296dd81-2a89-4031-8643-\
d1bfe43f0abf"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "1000", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"g", "=", 
   RowBox[{"makeDCM", "[", "deglist", "]"}]}], ";"}], "\n", 
 RowBox[{"g", "=", 
  RowBox[{"Annotate", "[", 
   RowBox[{"g", ",", 
    RowBox[{"PlotTheme", "\[Rule]", "\"\<ClassicDiagram\>\""}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.826282959146245*^9, 3.8262829899103403`*^9}, {
  3.826283309264225*^9, 3.826283323813093*^9}, {3.826284337139895*^9, 
  3.826284337867992*^9}, {3.826285298395555*^9, 3.826285299024808*^9}, {
  3.826285340493236*^9, 3.826285348651737*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"c039ae70-c15c-4b75-a998-4b9a5488673e"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 
      4}, {{{1, 3}, {1, 2}, {1, 4}, {2, 3}, {2, 2}, {3, 4}, {3, 2}, {4, 2}, {
       4, 3}}, Null}, {PlotTheme -> "ClassicDiagram"}]], Typeset`boxes, 
    Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[Medium], 
       Directive[
        Hue[0, 1, 0.5], 
        Opacity[1]], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$2", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$3", Automatic, Center]}], 
       ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], 
         DynamicLocation["VertexID$4", Automatic, Center]}], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation["VertexID$2", Automatic, Center], {
          0.0883773084525373, -0.1963438379796459}, {-0.009611730387778794, \
-0.3783639831794915}, {-0.14047393153771362`, -0.42859733044124365`}, \
{-0.4106846332290861, -0.16649561362753637`}, {-0.3644606503066745, \
-0.03416402907677846}, {-0.18550970535125463`, 0.06932386534080129}, 
          DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
         7]], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation["VertexID$2", Automatic, Center], {
          0.290905556305823, 0.5704635648319302}, 
          DynamicLocation["VertexID$3", Automatic, Center]}]], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation["VertexID$3", Automatic, Center], {
          0.5752678578810889, 0.2941709811866707}, 
          DynamicLocation["VertexID$2", Automatic, Center]}]], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation["VertexID$3", Automatic, Center], {
          0.4285653816398439, 0.7182703609170283}, 
          DynamicLocation["VertexID$4", Automatic, Center]}]], 
       ArrowBox[{
         DynamicLocation["VertexID$4", Automatic, Center], 
         DynamicLocation["VertexID$2", Automatic, Center]}], 
       ArrowBox[
        BezierCurveBox[{
          DynamicLocation["VertexID$4", Automatic, Center], {
          0.42457017036914524`, 0.9988508561587054}, 
          DynamicLocation["VertexID$3", Automatic, Center]}]]}, {
       Directive[
        Hue[0.15, 0.2, 1], 
        EdgeForm[{
          Thickness[0.003], 
          Hue[0.15, 0.6, 0.9], 
          Opacity[1]}]], 
       TagBox[{
         TagBox[
          
          RectangleBox[{0.8396854393460973, -0.014052579131712966`}, {
           0.8936957044718765, 0.039957685994066336`}], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          RectangleBox[{-0.013967270384966628`, -0.02700513256288965}, {
           0.040042994740812674`, 0.02700513256288965}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox["2", TraditionalForm], 
          DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          RectangleBox[{0.8261304194460986, 0.8376294134557092}, {
           0.8801406845718778, 0.8916396785814884}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox["3", TraditionalForm], 
          DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          RectangleBox[{-0.02700513256288965, 0.8254815384942457}, {
           0.02700513256288965, 0.8794918036200249}], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox["4", TraditionalForm], 
          DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> 
        "VertexLabelID$4"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.7606933090100982`, 
       356.0393066909899}, {-194.2393066909899, 191.2393066909899}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.826282937162937*^9, 3.826282954968918*^9}, {
   3.826282991303895*^9, 3.826283010886311*^9}, {3.826283121920081*^9, 
   3.8262831741569767`*^9}, {3.826283237372839*^9, 3.826283249929023*^9}, {
   3.826283303020349*^9, 3.8262833244680643`*^9}, {3.826283450496262*^9, 
   3.826283469760736*^9}, {3.8262843281257353`*^9, 3.8262843636596823`*^9}, 
   3.826285235598037*^9, 3.826285299680566*^9, {3.826285333824802*^9, 
   3.826285349426008*^9}, 3.8262957335921173`*^9, 3.826296171092808*^9, 
   3.826446444143818*^9, 3.8264499765357847`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"95e39e28-27dc-42a2-ac3e-c918c2ae11da"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"transitmatrix", "=", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"0", 
        FractionBox["1", "3"], 
        FractionBox["1", "3"], 
        FractionBox["1", "3"]},
       {"0", 
        FractionBox["1", "2"], 
        FractionBox["1", "2"], "0"},
       {"0", 
        FractionBox["1", "2"], "0", 
        FractionBox["1", "2"]},
       {"0", 
        FractionBox["1", "2"], 
        FractionBox["1", "2"], "0"}
      },
      GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], ";"}]], "Input",
 CellChangeTimes->{{3.826285357182281*^9, 3.82628536408339*^9}, {
  3.826285401558792*^9, 3.826285412543017*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"12ae12e6-70f6-4f0d-8cfa-cf8d827ba32b"],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"transitProbM", "[", "g", "]"}], "\[Equal]", "transitmatrix"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8262843773366013`*^9, 3.8262844243364477`*^9}, {
  3.82628445681495*^9, 3.826284515339405*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"aded749a-028b-467f-b63c-ab9e2dbcf556"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Stationary distributions", "Chapter",
 CellChangeTimes->{{3.826284629779499*^9, 
  3.8262846331674623`*^9}},ExpressionUUID->"464b09b8-2ec3-4f5c-b23e-\
e184b7214ab0"],

Cell[CellGroupData[{

Cell["Setup ", "Section",
 CellChangeTimes->{{3.826287070526782*^9, 
  3.826287071441677*^9}},ExpressionUUID->"1f4e535b-e921-464c-a674-\
4af8d4486e29"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"err2", "=", 
  RowBox[{
   RowBox[{"10", "^", 
    RowBox[{"-", "5"}]}], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.826285150597973*^9, 3.826285165375803*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"9907ec60-dc2a-4218-ac9b-2efcbc4e2cdd"],

Cell[BoxData["0.00001`"], "Output",
 CellChangeTimes->{{3.8262851554472933`*^9, 3.826285165704606*^9}, 
   3.826285212212448*^9, 3.8262854877916737`*^9, 3.826285764583776*^9, 
   3.82628585415908*^9, 3.826285942845379*^9, 3.826286023951591*^9, {
   3.826287047004319*^9, 3.826287074024404*^9}, 3.826295747976323*^9, 
   3.826296171172546*^9, 3.826446444191936*^9, 3.826449982938167*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"030df369-5106-448c-8887-4a63cdcdaf7d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["stationaryProbEigen", "Section",
 CellChangeTimes->{{3.826284724990365*^9, 
  3.8262847272382383`*^9}},ExpressionUUID->"9387b02c-35b6-4829-b645-\
e7d0a8096f12"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.8262847689964027`*^9, 3.826284770427264*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"c6e1c6ad-9e2d-4c22-bf03-f8946d93c7fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "stationaryProbEigen"}]], "Input",
 CellChangeTimes->{{3.8262871280394917`*^9, 3.8262871417067337`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"5f0f78f2-53b5-43eb-a770-98cbe497414f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"stationaryProbEigen[g] computes the stationary \
probability distribution for a simple random walk on g by using \
Eigenvectors\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "stationaryProbEigen", "[", "DCM`Private`g_", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`transit", ",", "DCM`Private`pi", ",",
                     "DCM`Private`n", ",", "DCM`Private`ev"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n", "=", 
                    RowBox[{"VertexCount", "[", "DCM`Private`g", "]"}]}], ";", 
                    RowBox[{"DCM`Private`transit", "=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"transitProbM", "[", "DCM`Private`g", "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"DCM`Private`ev", "=", 
                    RowBox[{
                    RowBox[{"Eigenvectors", "[", 
                    RowBox[{
                    RowBox[{"N", "[", "DCM`Private`transit", "]"}], ",", "1", 
                    ",", 
                    RowBox[{"Method", "\[Rule]", 
                    RowBox[{"{", "\"Arnoldi\"", "}"}]}]}], "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
                    ";", 
                    RowBox[{"DCM`Private`pi", "=", 
                    FractionBox["DCM`Private`ev", 
                    RowBox[{"Total", "[", "DCM`Private`ev", "]"}]]}]}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`stationaryProbEigen\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"stationaryProbEigen[g] computes the stationary \
probability distribution for a simple random walk on g by using \
Eigenvectors\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "stationaryProbEigen[g] computes the stationary probability distribution \
for a simple random walk on g by using Eigenvectors", "Documentation" -> None,
     "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DCM`stationaryProbEigen, {DCM`stationaryProbEigen[
         Pattern[DCM`Private`g, 
          Blank[]]] :> 
       Module[{DCM`Private`transit, DCM`Private`pi, DCM`Private`n, 
          DCM`Private`ev}, DCM`Private`n = VertexCount[DCM`Private`g]; 
         DCM`Private`transit = Transpose[
            DCM`transitProbM[DCM`Private`g]]; DCM`Private`ev = Part[
            Eigenvectors[
             N[DCM`Private`transit], 1, Method -> {"Arnoldi"}], 1]; 
         DCM`Private`pi = DCM`Private`ev/Total[DCM`Private`ev]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "DCM`stationaryProbEigen"], False]]], "Output",
 CellChangeTimes->{{3.826287132867091*^9, 3.826287142335381*^9}, 
   3.826295748290002*^9, 3.8262961713681307`*^9, 3.82644644440388*^9, 
   3.826449983163851*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"6d10af70-fb97-4c0d-9d3b-3a2f82fbae84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pi1", "=", 
  RowBox[{"stationaryProbEigen", "[", "g", "]"}]}]], "Input",
 CellChangeTimes->{{3.8262847320502977`*^9, 3.826284741834742*^9}, {
  3.8262855068080683`*^9, 3.826285507864849*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"bda14afd-2964-421f-b2bc-6c223644ba1b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "7.534132281460922`*^-17"}], ",", "0.5`", ",", 
   "0.3333333333333333`", ",", "0.1666666666666668`"}], "}"}]], "Output",
 CellChangeTimes->{{3.826284738094141*^9, 3.826284742254987*^9}, {
   3.826284772643568*^9, 3.826284795461276*^9}, 3.826284973806568*^9, {
   3.8262851901717157`*^9, 3.826285212363481*^9}, {3.82628549190178*^9, 
   3.826285508330606*^9}, 3.826285764725205*^9, 3.8262858544553013`*^9, 
   3.826285942997045*^9, 3.826286024101387*^9, 3.826287047162567*^9, 
   3.826287079678647*^9, {3.826287863160449*^9, 3.826287885121709*^9}, 
   3.826295748317338*^9, 3.826296171387033*^9, 3.826446444467935*^9, 
   3.826449983192273*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"5417f861-4a18-4881-a262-c53169e0a033"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{"Abs", "[", 
     RowBox[{
      RowBox[{"pi1", ".", "transitmatrix"}], "-", "pi1"}], "]"}], "]"}], "<", 
   "err2"}], "]"}]], "Input",
 CellChangeTimes->{{3.826285749997151*^9, 3.8262857554705467`*^9}, {
  3.826287881112064*^9, 3.826287919001981*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"d806db86-8ca8-4872-8f30-80076f507b6c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["stationaryProbNull", "Section",
 CellChangeTimes->{{3.826284724990365*^9, 3.8262847272382383`*^9}, {
  3.8262870551446953`*^9, 
  3.826287055871723*^9}},ExpressionUUID->"9b9ce2f9-66f8-497d-b516-\
9addc83b338f"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.8262847689964027`*^9, 3.826284770427264*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"695eccec-80be-4d39-a508-06aa44ef27b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "stationaryProbNull"}]], "Input",
 CellChangeTimes->{{3.82628714609945*^9, 3.8262871488939743`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"67185873-c89b-4bea-84a0-47cf6ca196ea"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"stationaryProbNull[g] computes the stationary \
probability distribution for a simple random walk on g by using \
NullSpace\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    
                    RowBox[{
                    "stationaryProbNull", "[", "DCM`Private`g_", "]"}], ":=", 
                    
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`transit", ",", "DCM`Private`pi", ",",
                     "DCM`Private`n", ",", "DCM`Private`ev"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n", "=", 
                    RowBox[{"VertexCount", "[", "DCM`Private`g", "]"}]}], ";", 
                    RowBox[{"DCM`Private`transit", "=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"transitProbM", "[", "DCM`Private`g", "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"DCM`Private`ev", "=", 
                    RowBox[{"First", "[", 
                    RowBox[{"N", "[", 
                    RowBox[{"NullSpace", "[", 
                    RowBox[{"DCM`Private`transit", "-", 
                    RowBox[{"IdentityMatrix", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`n", ",", "DCM`Private`n"}], "}"}], 
                    ",", "SparseArray"}], "]"}]}], "]"}], "]"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`pi", "=", 
                    FractionBox["DCM`Private`ev", 
                    RowBox[{"Total", "[", "DCM`Private`ev", "]"}]]}]}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`stationaryProbNull\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"stationaryProbNull[g] computes the stationary \
probability distribution for a simple random walk on g by using \
NullSpace\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "stationaryProbNull[g] computes the stationary probability distribution \
for a simple random walk on g by using NullSpace", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DCM`stationaryProbNull, {DCM`stationaryProbNull[
         Pattern[DCM`Private`g, 
          Blank[]]] :> 
       Module[{DCM`Private`transit, DCM`Private`pi, DCM`Private`n, 
          DCM`Private`ev}, DCM`Private`n = VertexCount[DCM`Private`g]; 
         DCM`Private`transit = Transpose[
            DCM`transitProbM[DCM`Private`g]]; DCM`Private`ev = First[
            N[
             NullSpace[
             DCM`Private`transit - 
              IdentityMatrix[{DCM`Private`n, DCM`Private`n}, SparseArray]]]]; 
         DCM`Private`pi = DCM`Private`ev/Total[DCM`Private`ev]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "DCM`stationaryProbNull"], False]]], "Output",
 CellChangeTimes->{3.826287149306919*^9, 3.826287932369238*^9, 
  3.8262957485704193`*^9, 3.826296171611676*^9, 3.826446444700561*^9, 
  3.826449983435205*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"b9944758-59e7-45fa-b83f-6c824337548d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pi1", "=", 
  RowBox[{"stationaryProbNull", "[", "g", "]"}]}]], "Input",
 CellChangeTimes->{{3.8262847320502977`*^9, 3.826284741834742*^9}, {
  3.8262855068080683`*^9, 3.826285507864849*^9}, {3.826287058218186*^9, 
  3.826287060155149*^9}, {3.8262871015831947`*^9, 3.8262871038377666`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"e1163b6e-8854-4c08-a1c5-e7437dd4105f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.5`", ",", "0.3333333333333333`", ",", 
   "0.16666666666666666`"}], "}"}]], "Output",
 CellChangeTimes->{{3.826284738094141*^9, 3.826284742254987*^9}, {
   3.826284772643568*^9, 3.826284795461276*^9}, 3.826284973806568*^9, {
   3.8262851901717157`*^9, 3.826285212363481*^9}, {3.82628549190178*^9, 
   3.826285508330606*^9}, 3.826285764725205*^9, 3.8262858544553013`*^9, 
   3.826285942997045*^9, 3.826286024101387*^9, 3.826287047162567*^9, 
   3.82628710878893*^9, {3.826287906086399*^9, 3.826287932394351*^9}, 
   3.826295748590847*^9, 3.826296171628483*^9, 3.8264464447217903`*^9, 
   3.826449983457307*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"2b9a6a4e-b91f-4dc5-a17a-8f9838e3d49c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{"Abs", "[", 
     RowBox[{
      RowBox[{"pi1", ".", "transitmatrix"}], "-", "pi1"}], "]"}], "]"}], "<", 
   "err2"}], "]"}]], "Input",
 CellChangeTimes->{{3.826285749997151*^9, 3.8262857554705467`*^9}, {
  3.826287881112064*^9, 3.826287919001981*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"e52a6f84-0f4a-4e7f-822d-4c98727f1ee8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["stationaryProb", "Section",
 CellChangeTimes->{{3.826284724990365*^9, 3.8262847272382383`*^9}, {
   3.8262859760401993`*^9, 3.826285976429462*^9}, 
   3.8262864998447847`*^9},ExpressionUUID->"3c92f6ce-6ecf-4aea-97a0-\
679b7875a29e"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.8262847689964027`*^9, 3.826284770427264*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"d380b4ed-92a4-4dea-a2eb-78daefebb5f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "stationaryProb"}]], "Input",
 CellChangeTimes->{{3.826287154148102*^9, 3.826287163558527*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"3fe900f4-d7d9-4293-820b-96a82a698b2a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"stationaryProb[g] computes the stationary \
probability distribution for a simple random walk on g by using \
StationaryDistribution\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"stationaryProb", "[", "DCM`Private`g_", "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`n", ",", "DCM`Private`mp", ",", 
                    "DCM`Private`stationary", ",", "DCM`Private`pi"}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n", "=", 
                    RowBox[{"VertexCount", "[", "DCM`Private`g", "]"}]}], ";", 
                    RowBox[{"DCM`Private`mp", "=", 
                    RowBox[{"DiscreteMarkovProcess", "[", 
                    RowBox[{"1", ",", "DCM`Private`g"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`stationary", "=", 
                    
                    RowBox[{"StationaryDistribution", "[", "DCM`Private`mp", 
                    "]"}]}], ";", 
                    RowBox[{"DCM`Private`pi", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"NProbability", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`x", "\[Equal]", "#1"}], ",", 
                    
                    RowBox[{"DCM`Private`x", "\[Distributed]", 
                    "DCM`Private`stationary"}]}], "]"}], "&"}], ")"}], "/@", 
                    RowBox[{"Range", "[", "DCM`Private`n", "]"}]}]}]}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`stationaryProb\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"stationaryProb[g] computes the stationary \
probability distribution for a simple random walk on g by using \
StationaryDistribution\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "stationaryProb[g] computes the stationary probability distribution for a \
simple random walk on g by using StationaryDistribution", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DCM`stationaryProb, {DCM`stationaryProb[
         Pattern[DCM`Private`g, 
          Blank[]]] :> 
       Module[{DCM`Private`n, DCM`Private`mp, DCM`Private`stationary, 
          DCM`Private`pi}, DCM`Private`n = VertexCount[DCM`Private`g]; 
         DCM`Private`mp = DiscreteMarkovProcess[1, DCM`Private`g]; 
         DCM`Private`stationary = StationaryDistribution[DCM`Private`mp]; 
         DCM`Private`pi = Map[NProbability[DCM`Private`x == #, 
             Distributed[DCM`Private`x, DCM`Private`stationary]]& , 
            Range[DCM`Private`n]]]}], "SubValues" -> None, "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> "DCM`stationaryProb"], 
   False]]], "Output",
 CellChangeTimes->{{3.8262871576203337`*^9, 3.826287170050786*^9}, 
   3.826287946699032*^9, 3.826295748839841*^9, 3.826296171857039*^9, 
   3.826446444945547*^9, 3.8264499836863327`*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"dcffc1e0-7fdc-4afb-a793-35d129fa7314"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pi1", "=", 
  RowBox[{"stationaryProb", "[", "g", "]"}]}]], "Input",
 CellChangeTimes->{{3.8262847320502977`*^9, 3.826284741834742*^9}, {
  3.8262855068080683`*^9, 3.826285507864849*^9}, {3.82628599488293*^9, 
  3.8262860076783953`*^9}, {3.826286516347287*^9, 3.8262865267828836`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"a5218edd-dc0f-411e-b689-45289d629053"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.5`", ",", "0.3333333333333333`", ",", 
   "0.16666666666666666`"}], "}"}]], "Output",
 CellChangeTimes->{{3.826284738094141*^9, 3.826284742254987*^9}, {
   3.826284772643568*^9, 3.826284795461276*^9}, 3.826284973806568*^9, {
   3.8262851901717157`*^9, 3.826285212363481*^9}, {3.82628549190178*^9, 
   3.826285508330606*^9}, 3.826285764725205*^9, 3.8262858544553013`*^9, 
   3.826285942997045*^9, 3.8262860091567*^9, {3.826286085360198*^9, 
   3.8262860962746477`*^9}, {3.826286505692458*^9, 3.826286530830368*^9}, 
   3.826287123757348*^9, 3.8262871700986757`*^9, 3.8262879467440166`*^9, 
   3.826295748911961*^9, 3.8262961723420963`*^9, 3.8264464449981327`*^9, 
   3.826449984278427*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"33124a24-292d-4bed-b2ad-87d8580ac360"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{"Abs", "[", 
     RowBox[{
      RowBox[{"pi1", ".", "transitmatrix"}], "-", "pi1"}], "]"}], "]"}], "<", 
   "err2"}], "]"}]], "Input",
 CellChangeTimes->{{3.826285749997151*^9, 3.8262857554705467`*^9}, {
  3.826287881112064*^9, 3.826287919001981*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"5bcdebfb-873c-4575-8d91-f00af4ab28a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["stationaryProbSim", "Section",
 CellChangeTimes->{{3.826284724990365*^9, 3.8262847272382383`*^9}, {
   3.8262859760401993`*^9, 3.826285976429462*^9}, 3.8262864998447847`*^9, {
   3.826287709714424*^9, 
   3.826287710082144*^9}},ExpressionUUID->"0ab64543-b0fe-4b95-baea-\
d6ece63ae434"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.8262847689964027`*^9, 3.826284770427264*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"8f9fec51-b6da-4209-be30-eedda435e2ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "stationaryProbSim"}]], "Input",
 CellChangeTimes->{{3.826287154148102*^9, 3.826287163558527*^9}, 
   3.826287714358879*^9},
 CellLabel->"In[70]:=",ExpressionUUID->"d70956de-e47c-40b2-89a1-f51b6f618428"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"stationaryProbSim[g] computes one stationary \
probability distribution for a simple random walk on g by simulating the \
random walk\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"stationaryProbSim", "[", 
                    RowBox[{
                    "DCM`Private`g_", ",", "DCM`Private`steps_", ",", 
                    RowBox[{"DCM`Private`a_", ":", "0"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`n", ",", "DCM`Private`mp", ",", 
                    "DCM`Private`walk", ",", "DCM`Private`giant", ",", 
                    "DCM`Private`pi1", ",", "DCM`Private`tally", ",", 
                    "DCM`Private`cur", ",", "DCM`Private`prev", ",", 
                    "DCM`Private`transit"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n", "=", 
                    RowBox[{"VertexCount", "[", "DCM`Private`g", "]"}]}], ";", 
                    RowBox[{"DCM`Private`pi", "=", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0.`", ",", "DCM`Private`n"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`transit", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "DCM`Private`a"}], ")"}], " ", 
                    RowBox[{"transitProbM", "[", "DCM`Private`g", "]"}]}], 
                    "+", 
                    FractionBox["DCM`Private`a", "DCM`Private`n"]}]}], ";", 
                    RowBox[{"DCM`Private`mp", "=", 
                    RowBox[{"DiscreteMarkovProcess", "[", 
                    RowBox[{"1", ",", "DCM`Private`transit"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`walk", "=", 
                    RowBox[{
                    RowBox[{"RandomFunction", "[", 
                    RowBox[{"DCM`Private`mp", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "DCM`Private`steps"}], "}"}]}], "]"}], 
                    "[", "\"Values\"", "]"}]}], ";", 
                    RowBox[{"DCM`Private`tally", "=", 
                    RowBox[{"SortBy", "[", 
                    RowBox[{
                    RowBox[{"Tally", "[", "DCM`Private`walk", "]"}], ",", 
                    "First"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`giant", "=", 
                    RowBox[{"DCM`Private`tally", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "1"}], 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"DCM`Private`pi1", "=", 
                    RowBox[{"N", "[", 
                    FractionBox[
                    RowBox[{"DCM`Private`tally", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", ";;", "All"}], ",", "2"}], 
                    "\[RightDoubleBracket]"}], "DCM`Private`steps"], "]"}]}], 
                    ";", 
                    RowBox[{"DCM`Private`prev", "=", "1"}], ";", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`i", "=", "1"}], ",", 
                    RowBox[{"DCM`Private`i", "\[LessEqual]", 
                    RowBox[{"Length", "[", "DCM`Private`giant", "]"}]}], ",", 
                    
                    RowBox[{"DCM`Private`i", "++"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`cur", "=", 
                    
                    RowBox[{"DCM`Private`giant", "\[LeftDoubleBracket]", 
                    "DCM`Private`i", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"For", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`j", "=", 
                    RowBox[{"DCM`Private`prev", "+", "1"}]}], ",", 
                    RowBox[{"DCM`Private`j", "<", "DCM`Private`cur"}], ",", 
                    RowBox[{"DCM`Private`j", "++"}], ",", 
                    RowBox[{
                    
                    RowBox[{"DCM`Private`pi", "\[LeftDoubleBracket]", 
                    "DCM`Private`j", "\[RightDoubleBracket]"}], "=", "0"}]}], 
                    "]"}], ";", 
                    RowBox[{
                    RowBox[{"DCM`Private`pi", "\[LeftDoubleBracket]", 
                    "DCM`Private`cur", "\[RightDoubleBracket]"}], "=", 
                    
                    RowBox[{"DCM`Private`pi1", "\[LeftDoubleBracket]", 
                    "DCM`Private`i", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"DCM`Private`prev", "=", "DCM`Private`cur"}], 
                    ";"}]}], "]"}], ";", "DCM`Private`pi"}]}], "]"}]}]}, {
                   " "}, {
                    RowBox[{
                    RowBox[{"stationaryProbSim", "[", "DCM`Private`g_", "]"}],
                     ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`n", ",", "DCM`Private`steps"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n", "=", 
                    RowBox[{"VertexCount", "[", "DCM`Private`g", "]"}]}], ";", 
                    RowBox[{"DCM`Private`steps", "=", 
                    RowBox[{"Round", "[", 
                    RowBox[{"50", " ", "DCM`Private`n", " ", 
                    RowBox[{"Log", "[", "DCM`Private`n", "]"}]}], "]"}]}], 
                    ";", 
                    RowBox[{"stationaryProbSim", "[", 
                    RowBox[{"DCM`Private`g", ",", "DCM`Private`steps"}], 
                    "]"}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`stationaryProbSim\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"stationaryProbSim[g] computes one stationary \
probability distribution for a simple random walk on g by simulating the \
random walk\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "stationaryProbSim[g] computes one stationary probability distribution \
for a simple random walk on g by simulating the random walk", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DCM`stationaryProbSim, {DCM`stationaryProbSim[
         Pattern[DCM`Private`g, 
          Blank[]], 
         Pattern[DCM`Private`steps, 
          Blank[]], 
         Optional[
          Pattern[DCM`Private`a, 
           Blank[]], 0]] :> 
       Module[{DCM`Private`n, DCM`Private`mp, DCM`Private`walk, 
          DCM`Private`giant, DCM`Private`pi1, DCM`Private`tally, 
          DCM`Private`cur, DCM`Private`prev, DCM`Private`transit}, 
         DCM`Private`n = VertexCount[DCM`Private`g]; 
         DCM`Private`pi = ConstantArray[0., DCM`Private`n]; 
         DCM`Private`transit = (1 - DCM`Private`a) 
            DCM`transitProbM[DCM`Private`g] + DCM`Private`a/DCM`Private`n; 
         DCM`Private`mp = DiscreteMarkovProcess[1, DCM`Private`transit]; 
         DCM`Private`walk = 
          RandomFunction[DCM`Private`mp, {1, DCM`Private`steps}]["Values"]; 
         DCM`Private`tally = SortBy[
            Tally[DCM`Private`walk], First]; 
         DCM`Private`giant = Part[DCM`Private`tally, 
            Span[1, All], 1]; DCM`Private`pi1 = N[Part[DCM`Private`tally, 
              Span[1, All], 2]/DCM`Private`steps]; DCM`Private`prev = 1; 
         For[DCM`Private`i = 1, DCM`Private`i <= Length[DCM`Private`giant], 
           Increment[DCM`Private`i], 
           DCM`Private`cur = Part[DCM`Private`giant, DCM`Private`i]; 
           For[DCM`Private`j = DCM`Private`prev + 1, DCM`Private`j < 
             DCM`Private`cur, 
             Increment[DCM`Private`j], Part[DCM`Private`pi, DCM`Private`j] = 
             0]; Part[DCM`Private`pi, DCM`Private`cur] = 
            Part[DCM`Private`pi1, DCM`Private`i]; 
           DCM`Private`prev = DCM`Private`cur; Null]; DCM`Private`pi], 
       DCM`stationaryProbSim[
         Pattern[DCM`Private`g, 
          Blank[]]] :> 
       Module[{DCM`Private`n, DCM`Private`steps}, 
         DCM`Private`n = VertexCount[DCM`Private`g]; 
         DCM`Private`steps = Round[50 DCM`Private`n Log[DCM`Private`n]]; 
         DCM`stationaryProbSim[DCM`Private`g, DCM`Private`steps]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "DCM`stationaryProbSim"], False]]], "Output",
 CellChangeTimes->{{3.8262871576203337`*^9, 3.826287170050786*^9}, 
   3.8262877163925533`*^9, {3.826287768243609*^9, 3.82628780863065*^9}, 
   3.826287955750083*^9, {3.826288000177458*^9, 3.8262880073214407`*^9}, 
   3.826295749225739*^9, 3.826296172654697*^9, 3.8264464452299213`*^9, 
   3.826449984617196*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"91e3f247-0ff8-4f91-8d98-8fd46c7ceed5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pi1", "=", 
  RowBox[{"stationaryProbSim", "[", 
   RowBox[{"g", ",", 
    RowBox[{"10", "^", "4"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8262847320502977`*^9, 3.826284741834742*^9}, {
  3.8262855068080683`*^9, 3.826285507864849*^9}, {3.82628599488293*^9, 
  3.8262860076783953`*^9}, {3.826286516347287*^9, 3.8262865267828836`*^9}, {
  3.826287719976318*^9, 3.8262877202942247`*^9}, {3.826287787702663*^9, 
  3.826287804183876*^9}, {3.826287846660623*^9, 3.826287846972664*^9}, {
  3.826288003998679*^9, 3.826288004200222*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"d0519b6f-7496-4c5c-93d3-da7938f10fb8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.`", ",", "0.4984`", ",", "0.3346`", ",", "0.167`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.826284738094141*^9, 3.826284742254987*^9}, {
   3.826284772643568*^9, 3.826284795461276*^9}, 3.826284973806568*^9, {
   3.8262851901717157`*^9, 3.826285212363481*^9}, {3.82628549190178*^9, 
   3.826285508330606*^9}, 3.826285764725205*^9, 3.8262858544553013`*^9, 
   3.826285942997045*^9, 3.8262860091567*^9, {3.826286085360198*^9, 
   3.8262860962746477`*^9}, {3.826286505692458*^9, 3.826286530830368*^9}, 
   3.826287123757348*^9, 3.8262871700986757`*^9, 3.826287720798545*^9, {
   3.826287768265551*^9, 3.82628780867564*^9}, 3.826287847907711*^9, 
   3.826287957349945*^9, {3.826288000507025*^9, 3.8262880073671513`*^9}, 
   3.826295749275817*^9, 3.826296172706917*^9, 3.826446445273135*^9, 
   3.826449984670415*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"fcf3dac3-1274-4d74-a898-b4406ebe76f6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{"Abs", "[", 
     RowBox[{
      RowBox[{"pi1", ".", "transitmatrix"}], "-", "pi1"}], "]"}], "]"}], "<", 
   
   RowBox[{"10", "^", 
    RowBox[{"-", "2"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.826285758906128*^9, 3.8262857619803467`*^9}, {
  3.826287979882455*^9, 3.8262879947317867`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"0180d704-7b16-4ddf-bfc5-8a6d9b791363"]
}, Open  ]],

Cell[CellGroupData[{

Cell["pageRank", "Section",
 CellChangeTimes->{{3.826446455898837*^9, 
  3.8264464575040503`*^9}},ExpressionUUID->"cbbcfde6-3956-4be9-af3b-\
b05b455f09a4"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.826446483401971*^9, 3.826446485221534*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"2ef810ec-6274-480e-91f9-be5fb7ea1d5d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "pageRank"}]], "Input",
 CellChangeTimes->{{3.826446487381785*^9, 3.8264464894251337`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"e3363e15-c2f1-4a10-8139-1eee5c377e59"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"pageRank[g, a] computes the PageRank vector of g \
with teleporting probability a by using Eigenvectors\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"pageRank", "[", 
                    RowBox[{"DCM`Private`g_", ",", 
                    RowBox[{"DCM`Private`a_", "/;", 
                    
                    RowBox[{"0", "\[LessEqual]", "DCM`Private`a", 
                    "\[LessEqual]", "1"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`transit", ",", "DCM`Private`pi", ",",
                     "DCM`Private`n", ",", "DCM`Private`ev"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n", "=", 
                    RowBox[{"VertexCount", "[", "DCM`Private`g", "]"}]}], ";", 
                    RowBox[{"DCM`Private`transit", "=", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "DCM`Private`a"}], ")"}], " ", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"transitProbM", "[", "DCM`Private`g", "]"}], 
                    "]"}]}], "+", 
                    FractionBox["DCM`Private`a", "DCM`Private`n"]}]}], ";", 
                    RowBox[{"DCM`Private`ev", "=", 
                    RowBox[{
                    RowBox[{"Eigenvectors", "[", 
                    RowBox[{
                    RowBox[{"N", "[", "DCM`Private`transit", "]"}], ",", "1", 
                    ",", 
                    RowBox[{"Method", "\[Rule]", 
                    RowBox[{"{", "\"Arnoldi\"", "}"}]}]}], "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
                    ";", 
                    RowBox[{"DCM`Private`pi", "=", 
                    FractionBox["DCM`Private`ev", 
                    RowBox[{"Total", "[", "DCM`Private`ev", "]"}]]}]}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`pageRank\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"pageRank[g, a] computes the PageRank vector of g \
with teleporting probability a by using Eigenvectors\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "pageRank[g, a] computes the PageRank vector of g with teleporting \
probability a by using Eigenvectors", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[DownValues, DCM`pageRank, {DCM`pageRank[
         Pattern[DCM`Private`g, 
          Blank[]], 
         Condition[
          Pattern[DCM`Private`a, 
           Blank[]], 0 <= DCM`Private`a <= 1]] :> 
       Module[{DCM`Private`transit, DCM`Private`pi, DCM`Private`n, 
          DCM`Private`ev}, DCM`Private`n = VertexCount[DCM`Private`g]; 
         DCM`Private`transit = (1 - DCM`Private`a) Transpose[
              DCM`transitProbM[DCM`Private`g]] + DCM`Private`a/DCM`Private`n; 
         DCM`Private`ev = Part[
            Eigenvectors[
             N[DCM`Private`transit], 1, Method -> {"Arnoldi"}], 1]; 
         DCM`Private`pi = DCM`Private`ev/Total[DCM`Private`ev]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "DCM`pageRank"], False]]], "Output",
 CellChangeTimes->{3.826446490597459*^9, 3.826449984927191*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"fdd4bf57-ca87-4bc4-923c-ec619827df84"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1", "=", 
   RowBox[{"1", "/", "2"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8264465245089607`*^9, 3.826446526233939*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"153dc90c-4aaf-40c3-a154-c27838e9010c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pagerank1", "=", 
  RowBox[{"pageRank", "[", 
   RowBox[{"g", ",", "a1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8264464917384453`*^9, 3.826446561349017*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"39b119e4-b393-4a25-a144-3756251fc24d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.12500000000000006`", ",", "0.36458333333333337`", ",", 
   "0.2916666666666667`", ",", "0.21874999999999986`"}], "}"}]], "Output",
 CellChangeTimes->{3.826446562456951*^9, 3.826449984954422*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"2c3b24b2-1662-4930-911c-c118417e522e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{"Abs", "[", 
     RowBox[{"pagerank1", "-", 
      RowBox[{"pagerank1", ".", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", "a1"}], ")"}], " ", "transitmatrix"}], "+", 
         FractionBox["a1", 
          RowBox[{"VertexCount", "[", "g", "]"}]]}], ")"}]}]}], "]"}], "]"}], 
   "<", "err1"}], "]"}]], "Input",
 CellChangeTimes->{{3.8264465792066936`*^9, 3.826446638863906*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"649941c4-df2e-49eb-b816-5ad7fc94d3f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["pageRankSim", "Section",
 CellChangeTimes->{{3.826446455898837*^9, 3.8264464575040503`*^9}, {
  3.826446646791295*^9, 
  3.826446647156101*^9}},ExpressionUUID->"a085d115-17f9-4ac6-8c00-\
e10dfdfba4d3"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.826446483401971*^9, 3.826446485221534*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"2f98e2bc-928d-4327-97b5-baab7c7ca917"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "pageRankSim"}]], "Input",
 CellChangeTimes->{{3.826446487381785*^9, 3.8264464894251337`*^9}, {
  3.826446652323339*^9, 3.826446652679903*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"645769ba-d36a-4133-8663-181e4c694159"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"pageRankSim[g, a] computes the PageRank vector of g \
with teleporting probability a by simulating the PageRank surfer\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"pageRankSim", "[", 
                    RowBox[{"DCM`Private`g_", ",", 
                    RowBox[{"DCM`Private`a_", "/;", 
                    
                    RowBox[{"0", "\[LessEqual]", "DCM`Private`a", 
                    "\[LessEqual]", "1"}]}], ",", 
                    RowBox[{"DCM`Private`steps_", ":", "0"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`n", ",", "DCM`Private`s"}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n", "=", 
                    RowBox[{"VertexCount", "[", "DCM`Private`g", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`steps", "\[Equal]", "0"}], ",", 
                    RowBox[{"DCM`Private`s", "=", 
                    RowBox[{"Round", "[", 
                    RowBox[{"50", " ", "DCM`Private`n", " ", 
                    RowBox[{"Log", "[", "DCM`Private`n", "]"}]}], "]"}]}], 
                    ",", 
                    RowBox[{"DCM`Private`s", "=", "DCM`Private`steps"}]}], 
                    "]"}], ";", 
                    RowBox[{"stationaryProbSim", "[", 
                    
                    RowBox[{"DCM`Private`g", ",", "DCM`Private`s", ",", 
                    "DCM`Private`a"}], "]"}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`pageRankSim\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"pageRankSim[g, a] computes the PageRank vector of g \
with teleporting probability a by simulating the PageRank surfer\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "pageRankSim[g, a] computes the PageRank vector of g with teleporting \
probability a by simulating the PageRank surfer", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DCM`pageRankSim, {DCM`pageRankSim[
         Pattern[DCM`Private`g, 
          Blank[]], 
         Condition[
          Pattern[DCM`Private`a, 
           Blank[]], 0 <= DCM`Private`a <= 1], 
         Optional[
          Pattern[DCM`Private`steps, 
           Blank[]], 0]] :> 
       Module[{DCM`Private`n, DCM`Private`s}, 
         DCM`Private`n = VertexCount[DCM`Private`g]; 
         If[DCM`Private`steps == 0, DCM`Private`s = 
           Round[50 DCM`Private`n Log[DCM`Private`n]], DCM`Private`s = 
           DCM`Private`steps]; 
         DCM`stationaryProbSim[
          DCM`Private`g, DCM`Private`s, DCM`Private`a]]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "DCM`pageRankSim"], False]]], "Output",
 CellChangeTimes->{3.826446490597459*^9, 3.826446653231224*^9, 
  3.826449985172413*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"1eda2078-d2ec-4143-9812-0dab43fa91ad"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1", "=", 
   RowBox[{"1", "/", "2"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8264465245089607`*^9, 3.826446526233939*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"782826d9-ae62-4a4b-aa3d-d3497c115523"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pagerank1", "=", 
  RowBox[{"pageRankSim", "[", 
   RowBox[{"g", ",", "a1", ",", 
    RowBox[{"10", "^", "5"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8264464917384453`*^9, 3.826446561349017*^9}, {
  3.826446663499707*^9, 3.8264466902966223`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"ab4b782d-0f54-4412-b86f-77063f2df232"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.12751`", ",", "0.36281`", ",", "0.29109`", ",", "0.21859`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.826446562456951*^9, {3.826446664474883*^9, 3.8264466910563307`*^9}, 
   3.826449985602783*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"69f051e3-40c9-4cf7-aec9-3bcf2bdbc1de"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{"Abs", "[", 
     RowBox[{"pagerank1", "-", 
      RowBox[{"pagerank1", ".", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", "a1"}], ")"}], " ", "transitmatrix"}], "+", 
         FractionBox["a1", 
          RowBox[{"VertexCount", "[", "g", "]"}]]}], ")"}]}]}], "]"}], "]"}], 
   "<", 
   RowBox[{"10", "^", 
    RowBox[{"-", "2"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8264465792066936`*^9, 3.826446638863906*^9}, {
  3.8264466696938963`*^9, 3.826446703603356*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"d893a572-8767-462d-a2ae-c0bb059ba37a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graph", "Chapter",
 CellChangeTimes->{{3.826288036836872*^9, 3.82628803741214*^9}, {
  3.826449990197815*^9, 
  3.8264499913312674`*^9}},ExpressionUUID->"46dd8ead-704a-4d54-abc7-\
1f58dc8dd26e"],

Cell[CellGroupData[{

Cell["isAttractive", "Section",
 CellChangeTimes->{{3.826288082259674*^9, 
  3.826288085018203*^9}},ExpressionUUID->"34c73ab2-b941-45c2-8af5-\
d14340a3f0dc"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.8262881307520514`*^9, 3.8262881321262283`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"9b4786a0-811e-4a07-96d5-fc8fac17fa9b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "isAttractive"}]], "Input",
 CellChangeTimes->{{3.826288134215766*^9, 3.826288137573544*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"0b307bd2-0cab-45ad-bcce-2dad1843d675"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"isAttractive[g,v] checks if there is a path from \
every vertex to v in g\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"isAttractive", "[", 
                    RowBox[{"DCM`Private`g_", ",", "DCM`Private`v_"}], "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "DCM`Private`n", "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n", "=", 
                    RowBox[{"VertexCount", "[", "DCM`Private`g", "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"VertexInComponent", "[", 
                    RowBox[{"DCM`Private`g", ",", "DCM`Private`v"}], "]"}], 
                    "]"}], "\[Equal]", "DCM`Private`n"}]}]}], "]"}]}]}, {
                   " "}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`isAttractive\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"isAttractive[g,v] checks if there is a path from \
every vertex to v in g\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "isAttractive[g,v] checks if there is a path from every vertex to v in g",
     "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DCM`isAttractive, {DCM`isAttractive[
         Pattern[DCM`Private`g, 
          Blank[]], 
         Pattern[DCM`Private`v, 
          Blank[]]] :> 
       Module[{DCM`Private`n}, DCM`Private`n = VertexCount[DCM`Private`g]; 
         Length[
            VertexInComponent[DCM`Private`g, DCM`Private`v]] == 
          DCM`Private`n]}], "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> "DCM`isAttractive"], 
   False]]], "Output",
 CellChangeTimes->{{3.826288137930416*^9, 3.8262881510717993`*^9}, 
   3.826295756045638*^9, 3.826296172953068*^9, 3.826446445527112*^9, 
   3.826449999085717*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"400b2367-4f0f-4d0a-bdc6-c49b9b3b2cbc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"isAttractive", "[", 
       RowBox[{"g", ",", "#1"}], "]"}], "&"}], ")"}], "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"VertexCount", "[", "g", "]"}], "]"}]}], "\[Equal]", 
   RowBox[{"{", 
    RowBox[{"False", ",", "True", ",", "True", ",", "True"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.826288086167634*^9, 3.826288125924033*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"9c74e2f6-2055-48a6-ae10-d06f15177dbf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["maxStationary", "Section",
 CellChangeTimes->{{3.8262882898410683`*^9, 
  3.826288296861308*^9}},ExpressionUUID->"db48a2c8-a7a9-442e-b379-\
559234c659c6"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.826288298336829*^9, 3.8262882997047777`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"691b1e81-bb89-4233-ae46-86b213d99240"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "maxStationary"}]], "Input",
 CellChangeTimes->{{3.826288301413828*^9, 3.826288305024878*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"6dce2e38-972f-4aca-9b00-ba91725c815a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"maxStationary[g,a] returns \
{pimax,piDelta,prmax,prDelta,attractive} \\nwhere \\n* pimax is the maximum \
stationary value,\\n* piDelta is the the stationary value of the node with \
maximum in-degree Delta,\\n* prmax is the maximum stationary PageRank,\\n* \
prDelta is the PageRank of the node with maximum in-degree Delta,\\n* \
attractive is if the graph has an attractive component\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"maxStationary", "[", 
                    RowBox[{"DCM`Private`g_", ",", "DCM`Private`a_"}], "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`n", ",", "DCM`Private`pi", ",", 
                    "DCM`Private`pr", ",", "DCM`Private`indeglist", ",", 
                    "DCM`Private`vDelta", ",", "DCM`Private`piDelta", ",", 
                    "DCM`Private`prDelta", ",", "DCM`Private`vpimax", ",", 
                    "DCM`Private`vprmax", ",", "DCM`Private`pimax", ",", 
                    "DCM`Private`prmax", ",", "DCM`Private`attractive"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`n", "=", 
                    RowBox[{"VertexCount", "[", "DCM`Private`g", "]"}]}], ";", 
                    RowBox[{"DCM`Private`indeglist", "=", 
                    RowBox[{"VertexInDegree", "[", "DCM`Private`g", "]"}]}], 
                    ";", 
                    RowBox[{"DCM`Private`vDelta", "=", 
                    RowBox[{
                    RowBox[{"Ordering", "[", 
                    RowBox[{"DCM`Private`indeglist", ",", 
                    RowBox[{"-", "1"}]}], "]"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"DCM`Private`pi", "=", 
                    
                    RowBox[{"stationaryProbEigen", "[", "DCM`Private`g", 
                    "]"}]}], ";", 
                    RowBox[{"DCM`Private`piDelta", "=", 
                    
                    RowBox[{"DCM`Private`pi", "\[LeftDoubleBracket]", 
                    "DCM`Private`vDelta", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"DCM`Private`vpimax", "=", 
                    RowBox[{
                    RowBox[{"Ordering", "[", 
                    RowBox[{"DCM`Private`pi", ",", 
                    RowBox[{"-", "1"}]}], "]"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"DCM`Private`pimax", "=", 
                    
                    RowBox[{"DCM`Private`pi", "\[LeftDoubleBracket]", 
                    "DCM`Private`vpimax", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"DCM`Private`attractive", "=", 
                    RowBox[{"isAttractive", "[", 
                    RowBox[{"DCM`Private`g", ",", "DCM`Private`vDelta"}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"DCM`Private`a", "\[Equal]", "0"}], ",", 
                    RowBox[{"DCM`Private`pr", "=", "DCM`Private`pi"}], ",", 
                    RowBox[{"DCM`Private`pr", "=", 
                    RowBox[{"pageRank", "[", 
                    RowBox[{"DCM`Private`g", ",", "DCM`Private`a"}], 
                    "]"}]}]}], "]"}], ";", 
                    RowBox[{"DCM`Private`prDelta", "=", 
                    
                    RowBox[{"DCM`Private`pr", "\[LeftDoubleBracket]", 
                    "DCM`Private`vDelta", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"DCM`Private`vprmax", "=", 
                    RowBox[{
                    RowBox[{"Ordering", "[", 
                    RowBox[{"DCM`Private`pr", ",", 
                    RowBox[{"-", "1"}]}], "]"}], "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"DCM`Private`prmax", "=", 
                    
                    RowBox[{"DCM`Private`pr", "\[LeftDoubleBracket]", 
                    "DCM`Private`vprmax", "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"DCM`Private`attractive", "=", 
                    RowBox[{"isAttractive", "[", 
                    RowBox[{"DCM`Private`g", ",", "DCM`Private`vDelta"}], 
                    "]"}]}], ";", 
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`pimax", ",", "DCM`Private`piDelta", 
                    ",", "DCM`Private`prmax", ",", "DCM`Private`prDelta", ",",
                     "DCM`Private`attractive"}], "}"}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`maxStationary\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"maxStationary[g,a] returns \
{pimax,piDelta,prmax,prDelta,attractive} \\nwhere \\n* pimax is the maximum \
stationary value,\\n* piDelta is the the stationary value of the node with \
maximum in-degree Delta,\\n* prmax is the maximum stationary PageRank,\\n* \
prDelta is the PageRank of the node with maximum in-degree Delta,\\n* \
attractive is if the graph has an attractive component\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "maxStationary[g,a] returns {pimax,piDelta,prmax,prDelta,attractive} \n\
where \n* pimax is the maximum stationary value,\n* piDelta is the the \
stationary value of the node with maximum in-degree Delta,\n* prmax is the \
maximum stationary PageRank,\n* prDelta is the PageRank of the node with \
maximum in-degree Delta,\n* attractive is if the graph has an attractive \
component", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, DCM`maxStationary, {DCM`maxStationary[
         Pattern[DCM`Private`g, 
          Blank[]], 
         Pattern[DCM`Private`a, 
          Blank[]]] :> 
       Module[{DCM`Private`n, DCM`Private`pi, DCM`Private`pr, 
          DCM`Private`indeglist, DCM`Private`vDelta, DCM`Private`piDelta, 
          DCM`Private`prDelta, DCM`Private`vpimax, DCM`Private`vprmax, 
          DCM`Private`pimax, DCM`Private`prmax, DCM`Private`attractive}, 
         DCM`Private`n = VertexCount[DCM`Private`g]; 
         DCM`Private`indeglist = VertexInDegree[DCM`Private`g]; 
         DCM`Private`vDelta = Part[
            Ordering[DCM`Private`indeglist, -1], 1]; 
         DCM`Private`pi = DCM`stationaryProbEigen[DCM`Private`g]; 
         DCM`Private`piDelta = Part[DCM`Private`pi, DCM`Private`vDelta]; 
         DCM`Private`vpimax = Part[
            Ordering[DCM`Private`pi, -1], 1]; 
         DCM`Private`pimax = Part[DCM`Private`pi, DCM`Private`vpimax]; 
         DCM`Private`attractive = 
          DCM`isAttractive[DCM`Private`g, DCM`Private`vDelta]; 
         If[DCM`Private`a == 0, DCM`Private`pr = DCM`Private`pi, 
           DCM`Private`pr = DCM`pageRank[DCM`Private`g, DCM`Private`a]]; 
         DCM`Private`prDelta = Part[DCM`Private`pr, DCM`Private`vDelta]; 
         DCM`Private`vprmax = Part[
            Ordering[DCM`Private`pr, -1], 1]; 
         DCM`Private`prmax = Part[DCM`Private`pr, DCM`Private`vprmax]; 
         DCM`Private`attractive = 
          DCM`isAttractive[DCM`Private`g, DCM`Private`vDelta]; {
          DCM`Private`pimax, DCM`Private`piDelta, DCM`Private`prmax, 
           DCM`Private`prDelta, DCM`Private`attractive}]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "DCM`maxStationary"], False]]], "Output",
 CellChangeTimes->{{3.826288305444934*^9, 3.826288328724245*^9}, {
   3.8262883642246923`*^9, 3.8262883909973087`*^9}, 3.826289114329915*^9, {
   3.826289193616343*^9, 3.826289207481542*^9}, {3.826289304471274*^9, 
   3.82628932103858*^9}, 3.8262957562937117`*^9, 3.8262961732309723`*^9, 
   3.82644644579428*^9, 3.826450008350102*^9, 3.826450237080468*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"a0fdd277-5c5f-49ee-b46b-fbd55192a0c5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a1", "=", 
   RowBox[{"1", "/", "2"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8264465245089607`*^9, 3.826446526233939*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"c2351e71-9d29-4d06-bebe-dc155a8bd547"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pagerank1", "=", 
  RowBox[{"pageRank", "[", 
   RowBox[{"g", ",", "a1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8264500623708277`*^9, 3.826450076446435*^9}, 
   3.826450163027093*^9},
 CellLabel->
  "In[102]:=",ExpressionUUID->"fd633de7-4437-4575-bd30-576837af6b84"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.12500000000000006`", ",", "0.36458333333333337`", ",", 
   "0.2916666666666667`", ",", "0.21874999999999986`"}], "}"}]], "Output",
 CellChangeTimes->{3.826450077589231*^9, 3.826450163420863*^9, 
  3.826450237111066*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"bd90df7c-ad97-47ba-a915-09ab9fa3076e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pi1", "=", 
  RowBox[{"stationaryProbEigen", "[", "g", "]"}]}]], "Input",
 CellChangeTimes->{{3.826450078828961*^9, 3.8264500994017467`*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"90c66d75-8174-41ed-8299-ea92009be281"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "7.534132281460922`*^-17"}], ",", "0.5`", ",", 
   "0.3333333333333333`", ",", "0.1666666666666668`"}], "}"}]], "Output",
 CellChangeTimes->{3.826450099734865*^9, 3.826450237137204*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"327c4031-bfdf-4702-9fdb-0dca4cad19df"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Assert", "[", 
  RowBox[{
   RowBox[{"maxStationary", "[", 
    RowBox[{"g", ",", "a1"}], "]"}], "\[Equal]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"pi1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
     ",", 
     RowBox[{"pi1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
     ",", 
     RowBox[{
     "pagerank1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
     RowBox[{
     "pagerank1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",",
      "True"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8262891153354607`*^9, 3.826289119487*^9}, {
  3.8262893285060587`*^9, 3.826289335530085*^9}, {3.826450112823464*^9, 
  3.826450172729191*^9}, {3.826450226897481*^9, 3.826450227328529*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"d9130d3c-324e-4ce8-9559-da77e5f96f3b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Simulation", "Chapter",
 CellChangeTimes->{{3.826291640626708*^9, 
  3.826291642067836*^9}},ExpressionUUID->"b049ce76-e63e-49c6-ab3d-\
acfe88a20a40"],

Cell[BoxData[
 RowBox[{"<<", "DCM`"}]], "Input",
 CellChangeTimes->{{3.8262916445895452`*^9, 3.826291646903081*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"3f4d3e84-afbe-4a27-90ef-1926d3f057f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "simDCM"}]], "Input",
 CellChangeTimes->{{3.826291679909807*^9, 3.826291686360314*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"6733eebe-3ef9-4a07-a5ef-1764a35db98d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"simDCM[pdf, r, n, p, a, nsample] simulates nsample \
DCM with in-degree distribution pdf, out-degree r, size n, with max degree \
cutoff probability p and output the stationary values and PageRank with \
teleporting probability a\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"simDCM", "[", 
                    
                    RowBox[{
                    "DCM`Private`pdf_", ",", "DCM`Private`r_", ",", 
                    "DCM`Private`n_", ",", "DCM`Private`p_", ",", 
                    "DCM`Private`a_", ",", "DCM`Private`nsample_"}], "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"DCM`Private`degseq", ",", "DCM`Private`heads", 
                    ",", "DCM`Private`tails", ",", "DCM`Private`data", ",", 
                    "DCM`Private`maxdeg", ",", "DCM`Private`col", ",", 
                    "DCM`Private`m"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DCM`Private`m", "=", 
                    RowBox[{"DCM`Private`n", " ", "DCM`Private`r"}]}], ";", 
                    RowBox[{"DCM`Private`degseq", "=", 
                    RowBox[{"pdf2Deg", "[", 
                    
                    RowBox[{"DCM`Private`pdf", ",", "DCM`Private`r", ",", 
                    "DCM`Private`n", ",", "DCM`Private`p"}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`maxdeg", "=", 
                    RowBox[{"Max", "[", 
                    
                    RowBox[{"DCM`Private`degseq", "\[LeftDoubleBracket]", "1",
                     "\[RightDoubleBracket]"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`heads", ",", "DCM`Private`tails"}], 
                    "}"}], "=", 
                    RowBox[{"deg2Stub", "/@", "DCM`Private`degseq"}]}], ";", 
                    RowBox[{"DCM`Private`data", "=", 
                    RowBox[{"ParallelTable", "[", 
                    RowBox[{
                    RowBox[{"maxStationary", "[", 
                    RowBox[{
                    RowBox[{"makeDCM", "[", 
                    
                    RowBox[{"DCM`Private`n", ",", "DCM`Private`heads", ",", 
                    "DCM`Private`tails"}], "]"}], ",", "DCM`Private`a"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"DCM`Private`i", ",", "1", ",", 
                    "DCM`Private`nsample"}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"DCM`Private`col", "=", 
                    RowBox[{"{", 
                    
                    RowBox[{"\"pimax\"", ",", "\"piDelta\"", ",", "\"prmax\"",
                     ",", "\"prDelta\"", ",", "\"attractive\""}], "}"}]}], 
                    ";", 
                    RowBox[{"DCM`Private`data", "=", 
                    RowBox[{
                    RowBox[{"Dataset", "[", "DCM`Private`data", "]"}], "[", 
                    RowBox[{"All", ",", 
                    RowBox[{"AssociationThread", "[", 
                    RowBox[{"DCM`Private`col", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"Length", "[", "DCM`Private`col", "]"}], "]"}]}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"Dataset", "[", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"n\"", "\[Rule]", "DCM`Private`n"}], ",", 
                    RowBox[{"\"m\"", "\[Rule]", "DCM`Private`m"}], ",", 
                    RowBox[{"\"maxdeg\"", "\[Rule]", "DCM`Private`maxdeg"}], 
                    ",", 
                    RowBox[{"\"data\"", "\[Rule]", "DCM`Private`data"}]}], 
                    "]"}], "]"}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"DCM`simDCM\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"simDCM[pdf, r, n, p, a, nsample] simulates nsample \
DCM with in-degree distribution pdf, out-degree r, size n, with max degree \
cutoff probability p and output the stationary values and PageRank with \
teleporting probability a\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "simDCM[pdf, r, n, p, a, nsample] simulates nsample DCM with in-degree \
distribution pdf, out-degree r, size n, with max degree cutoff probability p \
and output the stationary values and PageRank with teleporting probability a",
     "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[DownValues, DCM`simDCM, {DCM`simDCM[
         Pattern[DCM`Private`pdf, 
          Blank[]], 
         Pattern[DCM`Private`r, 
          Blank[]], 
         Pattern[DCM`Private`n, 
          Blank[]], 
         Pattern[DCM`Private`p, 
          Blank[]], 
         Pattern[DCM`Private`a, 
          Blank[]], 
         Pattern[DCM`Private`nsample, 
          Blank[]]] :> 
       Module[{DCM`Private`degseq, DCM`Private`heads, DCM`Private`tails, 
          DCM`Private`data, DCM`Private`maxdeg, DCM`Private`col, 
          DCM`Private`m}, DCM`Private`m = DCM`Private`n DCM`Private`r; 
         DCM`Private`degseq = 
          DCM`pdf2Deg[
           DCM`Private`pdf, DCM`Private`r, DCM`Private`n, DCM`Private`p]; 
         DCM`Private`maxdeg = Max[
            Part[DCM`Private`degseq, 1]]; {
           DCM`Private`heads, DCM`Private`tails} = 
          Map[DCM`deg2Stub, DCM`Private`degseq]; 
         DCM`Private`data = ParallelTable[
            DCM`maxStationary[
             DCM`makeDCM[DCM`Private`n, DCM`Private`heads, DCM`Private`tails],
              DCM`Private`a], {DCM`Private`i, 1, DCM`Private`nsample}]; 
         DCM`Private`col = {
           "pimax", "piDelta", "prmax", "prDelta", "attractive"}; 
         DCM`Private`data = Dataset[DCM`Private`data][All, 
            AssociationThread[DCM`Private`col, 
             Range[
              Length[DCM`Private`col]]]]; Dataset[
           Association[
           "n" -> DCM`Private`n, "m" -> DCM`Private`m, "maxdeg" -> 
            DCM`Private`maxdeg, "data" -> DCM`Private`data]]]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "DCM`simDCM"], False]]], "Output",
 CellChangeTimes->{{3.826291682084403*^9, 3.826291687068019*^9}, 
   3.8262919168013783`*^9, 3.8262929134869547`*^9, 3.826293138035939*^9, 
   3.82629339014447*^9, 3.8262934621810703`*^9, 3.82629576769834*^9, 
   3.826296173539894*^9, 3.826296287742917*^9, 3.8264464460397367`*^9, 
   3.826450962495892*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"f641ef51-afc2-43de-8df9-8d29ab6ad203"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"a0", "=", 
   RowBox[{"5", "/", "2"}]}], ";", 
  RowBox[{"r0", "=", "2"}], ";", 
  RowBox[{"n0", "=", "10000"}], ";", 
  RowBox[{"p0", "=", 
   RowBox[{"1", "/", "3"}]}], ";", 
  RowBox[{"a1", "=", 
   RowBox[{"1", "/", "2"}]}], ";", 
  RowBox[{"nsample0", "=", "2"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dist", "=", 
   RowBox[{"heavyTailDist", "[", 
    RowBox[{"a0", ",", "r0"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"pdf", "[", "i_", "]"}], "=", 
  RowBox[{"PDF", "[", 
   RowBox[{"dist", ",", "i"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.826291649873672*^9, 3.826291698243093*^9}, {
  3.82629175226025*^9, 3.826291821300157*^9}, {3.826450974176049*^9, 
  3.826451005314766*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"2c7acbe0-dc94-4653-ba1e-58e9742c6623"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        FractionBox["2", 
         RowBox[{
          SuperscriptBox["i", 
           RowBox[{"7", "/", "2"}]], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            RowBox[{"Zeta", "[", 
             FractionBox["5", "2"], "]"}]}], ")"}]}]], 
        RowBox[{"i", "\[GreaterEqual]", "2"}]},
       {
        FractionBox[
         RowBox[{"1", "+", 
          RowBox[{"Zeta", "[", 
           FractionBox["5", "2"], "]"}], "-", 
          RowBox[{"2", " ", 
           RowBox[{"Zeta", "[", 
            FractionBox["7", "2"], "]"}]}]}], 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          RowBox[{"Zeta", "[", 
           FractionBox["5", "2"], "]"}]}]], 
        RowBox[{"i", "\[Equal]", "0"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}},
      Selectable->True]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False,
  StripWrapperBoxes->True]], "Output",
 CellChangeTimes->{3.826451005766542*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"92e164aa-1c74-48b0-b72c-b4301d824fee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"simDCM", "[", 
   RowBox[{
   "pdf", ",", "r0", ",", "n0", ",", "p0", ",", "a1", ",", "nsample0"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.826291790239509*^9, 3.8262918529620647`*^9}, {
   3.8262919456273327`*^9, 3.826291949905044*^9}, 3.826295948396925*^9, {
   3.8262961863126793`*^9, 3.82629618781877*^9}, {3.82645101240618*^9, 
   3.826451013647328*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"135078e8-64d1-460b-8492-f0b37c651e66"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[
      "n" -> 10000, "m" -> 20000, "maxdeg" -> 32, "data" -> Dataset[{
          Association[
          "pimax" -> 0.002418878453562696, "piDelta" -> 0.002331969533792201, 
           "prmax" -> 0.0009308754917246951, "prDelta" -> 
           0.0009308754917246951, "attractive" -> True], 
          Association[
          "pimax" -> 0.0022365060148505774`, "piDelta" -> 
           0.0015733222434390754`, "prmax" -> 0.0009791091470424625, 
           "prDelta" -> 0.0008421871413098348, "attractive" -> True]}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "pimax", "piDelta", "prmax", "prDelta", "attractive"}, {
           TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 2], 
         Association[]]], "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[
       Association[{"n"} -> TypeSystem`PackageScope`AtomShape[34], {"m"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"maxdeg"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"data"} -> 
        TypeSystem`PackageScope`UnknownShape[False]], 1], "InitialType" -> 
     TypeSystem`Struct[{"n", "m", "maxdeg", "data"}, {
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[Integer], TypeSystem`AnyType}], "Meta" -> 
     Association[], "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[
       Association[{"n"} -> TypeSystem`PackageScope`AtomShape[34], {"m"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"maxdeg"} -> 
        TypeSystem`PackageScope`AtomShape[34], {"data"} -> 
        TypeSystem`PackageScope`UnknownShape[False]], 1], "Type" -> 
     TypeSystem`Struct[{"n", "m", "maxdeg", "data"}, {
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[Integer], TypeSystem`AnyType}], "Path" -> {}, 
     "BaseIndices" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 
     10, "DataRowCount" -> 4, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["n", 
                  Style[
                  "n", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["n"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["n"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["10000"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["n"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["m", 
                  Style[
                  "m", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["m"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["m"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["20000"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["m"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["maxdeg", 
                  Style[
                  "maxdeg", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["maxdeg"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["maxdeg"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["maxdeg"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["data", 
                  Style[
                  "data", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["data"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["data"]}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Dataset[{
                 Association[
                 "pimax" -> 0.002418878453562696, "piDelta" -> 
                  0.002331969533792201, "prmax" -> 0.0009308754917246951, 
                  "prDelta" -> 0.0009308754917246951, "attractive" -> True], 
                 Association[
                 "pimax" -> 0.0022365060148505774`, "piDelta" -> 
                  0.0015733222434390754`, "prmax" -> 0.0009791091470424625, 
                  "prDelta" -> 0.0008421871413098348, "attractive" -> True]}, 
                
                TypeSystem`Vector[
                 
                 TypeSystem`Struct[{
                  "pimax", "piDelta", "prmax", "prDelta", "attractive"}, {
                  TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
                   TypeSystem`AnyType, TypeSystem`AnyType}], 2], 
                Association[]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["data"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{450., {113.25909090909092`, 118.74090909090908`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{450., {113.25909090909092`, 118.74090909090908`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8262918367405987`*^9, 3.826291854913063*^9}, 
   3.826291917087154*^9, 3.826291950910282*^9, 3.826292503535759*^9, 
   3.826292570558694*^9, 3.826292645557755*^9, {3.8262927834173937`*^9, 
   3.826292812074292*^9}, 3.826292877282514*^9, 3.8262929157652187`*^9, 
   3.826293110413064*^9, 3.8262931415660152`*^9, 3.826293245225416*^9, 
   3.826293392217841*^9, {3.826293464137986*^9, 3.826293482168256*^9}, 
   3.8262957701412*^9, 3.826295809531271*^9, {3.826295949908092*^9, 
   3.826295957658811*^9}, {3.826296181325554*^9, 3.826296188501667*^9}, 
   3.826296288106221*^9, 3.826446453252366*^9, 3.826451027428792*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"c35fbf23-4486-4373-b30d-07abb5e788ec"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1256.7272727272727`, 706.909090909091},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
CellContext->Notebook,
FrontEndVersion->"12.2 for Linux x86 (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b4c6a341-c359-47d8-a61a-48cce5c242ec"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 256, 4, 97, "Title",ExpressionUUID->"99301676-6df3-42db-9e11-4144779f6f50"],
Cell[CellGroupData[{
Cell[861, 30, 152, 3, 69, "Chapter",ExpressionUUID->"e6566f31-59ce-40cb-b911-d2d98f712a05"],
Cell[1016, 35, 269, 5, 29, "Input",ExpressionUUID->"b01b0946-f6a3-4215-aa50-697bdf77e0d5"],
Cell[1288, 42, 202, 3, 34, "Text",ExpressionUUID->"53c25db4-7134-4ef2-a9b7-fb3a0239f384"],
Cell[1493, 47, 243, 4, 29, "Input",ExpressionUUID->"b5e6d528-28d8-4d7b-9e6c-407b44581c4b"],
Cell[1739, 53, 204, 3, 29, "Input",ExpressionUUID->"267a7230-0ad8-4f51-bf6c-24dc1c913366"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1980, 61, 170, 3, 69, "Chapter",ExpressionUUID->"634d113c-d754-427f-9028-8718829cfb58"],
Cell[CellGroupData[{
Cell[2175, 68, 301, 7, 66, "Section",ExpressionUUID->"6a2522b2-b776-47be-bfbc-005543736216"],
Cell[2479, 77, 192, 3, 29, "Input",ExpressionUUID->"68987963-70b5-473a-803a-ce5e43172b94"],
Cell[CellGroupData[{
Cell[2696, 84, 202, 3, 29, "Input",ExpressionUUID->"9f882163-be40-43d7-9a78-ba26fa41ef80"],
Cell[2901, 89, 15684, 368, 91, "Output",ExpressionUUID->"593eefd0-605b-45d4-b3de-40928f57fde1"]
}, Open  ]],
Cell[18600, 460, 1228, 32, 92, "Input",ExpressionUUID->"98acd00a-a764-4b64-89c2-6ab336f7f293"],
Cell[19831, 494, 261, 5, 29, "Input",ExpressionUUID->"24aa476b-3da4-4ac6-bcb3-6b7ce932a96c"],
Cell[20095, 501, 263, 5, 29, "Input",ExpressionUUID->"ec880ed3-0612-4306-bfb5-9f3f505494ca"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[20407, 512, 160, 3, 69, "Chapter",ExpressionUUID->"c7de4df1-ef24-4ec1-914a-8f2b47abda02"],
Cell[CellGroupData[{
Cell[20592, 519, 267, 6, 66, "Section",ExpressionUUID->"aa8f7cf9-d7c2-41cf-900a-5cb1cf5058f6"],
Cell[20862, 527, 194, 3, 29, "Input",ExpressionUUID->"aa4eca13-f15d-450c-b434-89ce6f90de52"],
Cell[CellGroupData[{
Cell[21081, 534, 196, 3, 29, "Input",ExpressionUUID->"782047c1-84bb-42e9-84aa-e02d36976adc"],
Cell[21280, 539, 13083, 311, 91, "Output",ExpressionUUID->"cd0ad150-9bf1-4d57-8062-5179fe9fa7b5"]
}, Open  ]],
Cell[34378, 853, 480, 11, 29, "Input",ExpressionUUID->"657e753c-bb1b-49d9-a40b-2665e2a5ec2a"],
Cell[34861, 866, 423, 10, 29, "Input",ExpressionUUID->"bb63935e-5de3-41da-96da-82851207a126"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35321, 881, 303, 7, 66, "Section",ExpressionUUID->"31ae4e00-b584-4077-82a6-93fffe8ad8d5"],
Cell[35627, 890, 193, 3, 29, "Input",ExpressionUUID->"3d245877-f5b8-48b9-a8f4-322df8467958"],
Cell[CellGroupData[{
Cell[35845, 897, 205, 3, 29, "Input",ExpressionUUID->"b18bd3cb-c2c3-4e04-b9c3-6e7df517dbc3"],
Cell[36053, 902, 12686, 307, 91, "Output",ExpressionUUID->"a2f130d7-6785-4650-a114-4e5608e03b9e"]
}, Open  ]],
Cell[48754, 1212, 495, 11, 29, "Input",ExpressionUUID->"1f8eae1f-9b14-4214-8388-20855d156795"],
Cell[CellGroupData[{
Cell[49274, 1227, 393, 7, 29, "Input",ExpressionUUID->"dcc472ab-7dbf-4971-af06-b9d18090ab65"],
Cell[49670, 1236, 2682, 71, 107, "Output",ExpressionUUID->"a7cbb110-675a-41a8-a421-dfdff566b7b3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52389, 1312, 284, 6, 29, "Input",ExpressionUUID->"4507938d-88e1-46fe-9d51-eddc28d6b729"],
Cell[52676, 1320, 2366, 66, 107, "Output",ExpressionUUID->"304f32ff-40f6-4172-a0fd-a2e738ee650f"]
}, Open  ]],
Cell[55057, 1389, 417, 8, 29, "Input",ExpressionUUID->"95eff748-745a-4188-8055-45b79dd638f7"],
Cell[55477, 1399, 434, 10, 29, "Input",ExpressionUUID->"2130324b-dcb8-42eb-82e5-3b948a7f241d"],
Cell[55914, 1411, 392, 8, 29, "Input",ExpressionUUID->"cd61a3ac-543c-4de0-9315-31a5146cc6eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56343, 1424, 291, 6, 66, "Section",ExpressionUUID->"33b74e9c-9e9f-4957-a5a5-0f31eaa1c89d"],
Cell[56637, 1432, 195, 3, 29, "Input",ExpressionUUID->"88da40f2-2104-4253-9686-a73e5cd865f0"],
Cell[CellGroupData[{
Cell[56857, 1439, 195, 3, 29, "Input",ExpressionUUID->"e4e51fd5-0c02-4892-9ae8-5a66736aba34"],
Cell[57055, 1444, 24712, 541, 114, "Output",ExpressionUUID->"e4eb8314-1abd-47af-9663-0c7cb2b3fee2"]
}, Open  ]],
Cell[81782, 1988, 405, 8, 29, "Input",ExpressionUUID->"f6827746-c883-46c3-8ed1-5fa61ac5d03d"],
Cell[82190, 1998, 1303, 37, 43, "Input",ExpressionUUID->"2c962011-04d5-44d1-b125-17a476b90fc9"],
Cell[CellGroupData[{
Cell[83518, 2039, 604, 14, 29, "Input",ExpressionUUID->"dd69799e-115e-4969-ada4-b25064da6fcd"],
Cell[84125, 2055, 2787, 70, 57, "Output",ExpressionUUID->"2b9f65da-655f-4e2e-81ae-df710769041f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86949, 2130, 205, 3, 29, "Input",ExpressionUUID->"8e12e41d-58f8-4598-b056-1128a65f567e"],
Cell[87157, 2135, 557, 11, 47, "Output",ExpressionUUID->"e75b5ae8-d32a-46d1-a95f-82099fd1821c"]
}, Open  ]],
Cell[87729, 2149, 720, 18, 29, "Input",ExpressionUUID->"7d3249de-36e0-400a-96ca-43cf40d1ed8c"],
Cell[88452, 2169, 218, 4, 29, "Input",ExpressionUUID->"7b514866-dd08-479d-85e4-b7b581093a88"],
Cell[88673, 2175, 486, 9, 29, "Input",ExpressionUUID->"428b809f-00a9-400d-ab71-16f3ca5e7fb6"],
Cell[89162, 2186, 269, 5, 29, "Input",ExpressionUUID->"7c9df46e-2011-4cc6-921f-55425aa00bd5"],
Cell[CellGroupData[{
Cell[89456, 2195, 323, 6, 29, "Input",ExpressionUUID->"4a439703-6aae-407f-9654-60cb2c773a5c"],
Cell[89782, 2203, 1024, 29, 33, "Output",ExpressionUUID->"e4a772b2-2cd8-4567-84db-7c2a3076446c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90843, 2237, 375, 9, 43, "Input",ExpressionUUID->"7cb4c047-a1dc-4379-8177-d4eda8670c31"],
Cell[91221, 2248, 544, 12, 48, "Output",ExpressionUUID->"25035332-2110-4133-bfbb-e371c7066ef5"]
}, Open  ]],
Cell[91780, 2263, 290, 7, 29, "Input",ExpressionUUID->"fd6afb94-f36c-4a77-b4b1-965e5f5d50fd"],
Cell[92073, 2272, 533, 15, 29, "Input",ExpressionUUID->"33a0958b-b8e1-416e-a0be-e61edff97d69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92643, 2292, 291, 6, 66, "Section",ExpressionUUID->"f90c4914-7576-4fd1-a9a8-4c30814a1ce7"],
Cell[CellGroupData[{
Cell[92959, 2302, 152, 3, 54, "Subsection",ExpressionUUID->"c2510eaf-8c66-4b28-8094-35c76762c8d5"],
Cell[93114, 2307, 195, 3, 29, "Input",ExpressionUUID->"13b18416-73fd-4055-afb5-78eb234b37b5"],
Cell[CellGroupData[{
Cell[93334, 2314, 195, 3, 29, "Input",ExpressionUUID->"6a62949d-84da-4cbd-98da-7015a7f9a90a"],
Cell[93532, 2319, 25433, 551, 114, "Output",ExpressionUUID->"65ecb72c-9ef3-45a2-b32f-1a15aeef6018"]
}, Open  ]],
Cell[118980, 2873, 1020, 18, 29, "Input",ExpressionUUID->"f681e5e7-3504-4fa0-96ae-d6b5408fb007"],
Cell[120003, 2893, 385, 8, 29, "Input",ExpressionUUID->"00b237ec-c0bf-456d-bfca-6ac0335e7730"],
Cell[CellGroupData[{
Cell[120413, 2905, 334, 7, 29, "Input",ExpressionUUID->"b9247592-46d3-47d6-9aca-6ccf9fc00ef4"],
Cell[120750, 2914, 2515, 68, 107, "Output",ExpressionUUID->"69426469-4eed-46e1-b4d9-d2e08d61ad7f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123302, 2987, 227, 4, 29, "Input",ExpressionUUID->"2e81a8c3-1ec4-47d9-863c-f6c2a35b5544"],
Cell[123532, 2993, 475, 7, 33, "Output",ExpressionUUID->"28751e42-061f-454f-be1f-18eca31663b9"]
}, Open  ]],
Cell[124022, 3003, 501, 10, 29, "Input",ExpressionUUID->"5207bace-337e-4182-9106-9d3ee844fe86"],
Cell[124526, 3015, 365, 9, 29, "Input",ExpressionUUID->"b82cf851-3b33-4396-bc4f-df4e2c97c2bb"],
Cell[124894, 3026, 318, 6, 29, "Input",ExpressionUUID->"383a4bcf-e366-42a0-ba34-12a172c11842"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[125273, 3039, 150, 3, 69, "Chapter",ExpressionUUID->"8d1f8d91-9494-4de1-ab4b-52a4e783df2a"],
Cell[CellGroupData[{
Cell[125448, 3046, 295, 7, 66, "Section",ExpressionUUID->"a45f5cce-952b-427f-ae54-210b8dc398c6"],
Cell[125746, 3055, 195, 3, 29, "Input",ExpressionUUID->"6862bb84-7c40-4200-a6d5-edcf704aaa01"],
Cell[CellGroupData[{
Cell[125966, 3062, 193, 3, 29, "Input",ExpressionUUID->"10de13c2-0bb3-4726-9cb0-aec76719c97b"],
Cell[126162, 3067, 13118, 318, 114, "Output",ExpressionUUID->"1e8f6f93-90a7-4729-92ed-63cf078a9c29"]
}, Open  ]],
Cell[139295, 3388, 690, 13, 29, "Input",ExpressionUUID->"9c047c1c-2f75-40ad-8ca4-24ff469d8c26"],
Cell[139988, 3403, 422, 8, 29, "Input",ExpressionUUID->"9dc8105b-c9df-4317-9b8d-d77ba9cd8bd5"],
Cell[140413, 3413, 390, 7, 29, "Input",ExpressionUUID->"a063f1c2-3207-4142-a9bf-cf31840c618f"],
Cell[140806, 3422, 285, 6, 29, "Input",ExpressionUUID->"79e2acf2-ac3f-44ae-a04e-faa9c4fef5f1"],
Cell[141094, 3430, 285, 6, 29, "Input",ExpressionUUID->"b928fa8b-6be6-4c10-bc63-8962feae27bb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[141416, 3441, 300, 7, 66, "Section",ExpressionUUID->"8296dd81-2a89-4031-8643-d1bfe43f0abf"],
Cell[CellGroupData[{
Cell[141741, 3452, 674, 15, 71, "Input",ExpressionUUID->"c039ae70-c15c-4b75-a998-4b9a5488673e"],
Cell[142418, 3469, 5523, 122, 409, "Output",ExpressionUUID->"95e39e28-27dc-42a2-ac3e-c918c2ae11da"]
}, Open  ]],
Cell[147956, 3594, 1077, 31, 110, "Input",ExpressionUUID->"12ae12e6-70f6-4f0d-8cfa-cf8d827ba32b"],
Cell[149036, 3627, 341, 7, 29, "Input",ExpressionUUID->"aded749a-028b-467f-b63c-ab9e2dbcf556"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[149426, 3640, 171, 3, 69, "Chapter",ExpressionUUID->"464b09b8-2ec3-4f5c-b23e-e184b7214ab0"],
Cell[CellGroupData[{
Cell[149622, 3647, 151, 3, 67, "Section",ExpressionUUID->"1f4e535b-e921-464c-a674-4af8d4486e29"],
Cell[CellGroupData[{
Cell[149798, 3654, 266, 6, 29, "Input",ExpressionUUID->"9907ec60-dc2a-4218-ac9b-2efcbc4e2cdd"],
Cell[150067, 3662, 465, 6, 33, "Output",ExpressionUUID->"030df369-5106-448c-8887-4a63cdcdaf7d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[150581, 3674, 166, 3, 67, "Section",ExpressionUUID->"9387b02c-35b6-4829-b645-e7d0a8096f12"],
Cell[150750, 3679, 195, 3, 29, "Input",ExpressionUUID->"c6e1c6ad-9e2d-4c22-bf03-f8946d93c7fb"],
Cell[CellGroupData[{
Cell[150970, 3686, 211, 3, 29, "Input",ExpressionUUID->"5f0f78f2-53b5-43eb-a770-98cbe497414f"],
Cell[151184, 3691, 12233, 295, 91, "Output",ExpressionUUID->"6d10af70-fb97-4c0d-9d3b-3a2f82fbae84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163454, 3991, 295, 5, 29, "Input",ExpressionUUID->"bda14afd-2964-421f-b2bc-6c223644ba1b"],
Cell[163752, 3998, 779, 13, 35, "Output",ExpressionUUID->"5417f861-4a18-4881-a262-c53169e0a033"]
}, Open  ]],
Cell[164546, 4014, 419, 10, 29, "Input",ExpressionUUID->"d806db86-8ca8-4872-8f30-80076f507b6c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165002, 4029, 216, 4, 67, "Section",ExpressionUUID->"9b9ce2f9-66f8-497d-b516-9addc83b338f"],
Cell[165221, 4035, 195, 3, 29, "Input",ExpressionUUID->"695eccec-80be-4d39-a508-06aa44ef27b9"],
Cell[CellGroupData[{
Cell[165441, 4042, 207, 3, 29, "Input",ExpressionUUID->"67185873-c89b-4bea-84a0-47cf6ca196ea"],
Cell[165651, 4047, 12317, 298, 91, "Output",ExpressionUUID->"b9944758-59e7-45fa-b83f-6c824337548d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[178005, 4350, 393, 6, 29, "Input",ExpressionUUID->"e1163b6e-8854-4c08-a1c5-e7437dd4105f"],
Cell[178401, 4358, 745, 13, 33, "Output",ExpressionUUID->"2b9a6a4e-b91f-4dc5-a17a-8f9838e3d49c"]
}, Open  ]],
Cell[179161, 4374, 419, 10, 29, "Input",ExpressionUUID->"e52a6f84-0f4a-4e7f-822d-4c98727f1ee8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179617, 4389, 238, 4, 67, "Section",ExpressionUUID->"3c92f6ce-6ecf-4aea-97a0-679b7875a29e"],
Cell[179858, 4395, 195, 3, 29, "Input",ExpressionUUID->"d380b4ed-92a4-4dea-a2eb-78daefebb5f4"],
Cell[CellGroupData[{
Cell[180078, 4402, 202, 3, 29, "Input",ExpressionUUID->"3fe900f4-d7d9-4293-820b-96a82a698b2a"],
Cell[180283, 4407, 12325, 296, 91, "Output",ExpressionUUID->"dcffc1e0-7fdc-4afb-a793-35d129fa7314"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192645, 4708, 388, 6, 29, "Input",ExpressionUUID->"a5218edd-dc0f-411e-b689-45289d629053"],
Cell[193036, 4716, 824, 14, 33, "Output",ExpressionUUID->"33124a24-292d-4bed-b2ad-87d8580ac360"]
}, Open  ]],
Cell[193875, 4733, 419, 10, 29, "Input",ExpressionUUID->"5bcdebfb-873c-4575-8d91-f00af4ab28a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[194331, 4748, 291, 5, 67, "Section",ExpressionUUID->"0ab64543-b0fe-4b95-baea-d6ece63ae434"],
Cell[194625, 4755, 195, 3, 29, "Input",ExpressionUUID->"8f9fec51-b6da-4209-be30-eedda435e2ca"],
Cell[CellGroupData[{
Cell[194845, 4762, 231, 4, 29, "Input",ExpressionUUID->"d70956de-e47c-40b2-89a1-f51b6f618428"],
Cell[195079, 4768, 18003, 403, 91, "Output",ExpressionUUID->"91e3f247-0ff8-4f91-8d98-8fd46c7ceed5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[213119, 5176, 636, 11, 29, "Input",ExpressionUUID->"d0519b6f-7496-4c5c-93d3-da7938f10fb8"],
Cell[213758, 5189, 936, 15, 33, "Output",ExpressionUUID->"fcf3dac3-1274-4d74-a898-b4406ebe76f6"]
}, Open  ]],
Cell[214709, 5207, 463, 12, 29, "Input",ExpressionUUID->"0180d704-7b16-4ddf-bfc5-8a6d9b791363"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215209, 5224, 155, 3, 67, "Section",ExpressionUUID->"cbbcfde6-3956-4be9-af3b-b05b455f09a4"],
Cell[215367, 5229, 193, 3, 29, "Input",ExpressionUUID->"2ef810ec-6274-480e-91f9-be5fb7ea1d5d"],
Cell[CellGroupData[{
Cell[215585, 5236, 198, 3, 29, "Input",ExpressionUUID->"e3363e15-c2f1-4a10-8139-1eee5c377e59"],
Cell[215786, 5241, 12615, 304, 91, "Output",ExpressionUUID->"fdd4bf57-ca87-4bc4-923c-ec619827df84"]
}, Open  ]],
Cell[228416, 5548, 239, 5, 29, "Input",ExpressionUUID->"153dc90c-4aaf-40c3-a154-c27838e9010c"],
Cell[CellGroupData[{
Cell[228680, 5557, 264, 5, 29, "Input",ExpressionUUID->"39b119e4-b393-4a25-a144-3756251fc24d"],
Cell[228947, 5564, 318, 6, 33, "Output",ExpressionUUID->"2c3b24b2-1662-4930-911c-c118417e522e"]
}, Open  ]],
Cell[229280, 5573, 608, 16, 47, "Input",ExpressionUUID->"649941c4-df2e-49eb-b816-5ad7fc94d3f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229925, 5594, 207, 4, 67, "Section",ExpressionUUID->"a085d115-17f9-4ac6-8c00-e10dfdfba4d3"],
Cell[230135, 5600, 193, 3, 29, "Input",ExpressionUUID->"2f98e2bc-928d-4327-97b5-baab7c7ca917"],
Cell[CellGroupData[{
Cell[230353, 5607, 250, 4, 29, "Input",ExpressionUUID->"645769ba-d36a-4133-8663-181e4c694159"],
Cell[230606, 5613, 12230, 299, 91, "Output",ExpressionUUID->"1eda2078-d2ec-4143-9812-0dab43fa91ad"]
}, Open  ]],
Cell[242851, 5915, 239, 5, 29, "Input",ExpressionUUID->"782826d9-ae62-4a4b-aa3d-d3497c115523"],
Cell[CellGroupData[{
Cell[243115, 5924, 354, 7, 29, "Input",ExpressionUUID->"ab4b782d-0f54-4412-b86f-77063f2df232"],
Cell[243472, 5933, 322, 7, 33, "Output",ExpressionUUID->"69f051e3-40c9-4cf7-aec9-3bcf2bdbc1de"]
}, Open  ]],
Cell[243809, 5943, 701, 19, 47, "Input",ExpressionUUID->"d893a572-8767-462d-a2ae-c0bb059ba37a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[244559, 5968, 200, 4, 69, "Chapter",ExpressionUUID->"46dd8ead-704a-4d54-abc7-1f58dc8dd26e"],
Cell[CellGroupData[{
Cell[244784, 5976, 157, 3, 67, "Section",ExpressionUUID->"34c73ab2-b941-45c2-8af5-d14340a3f0dc"],
Cell[244944, 5981, 197, 3, 29, "Input",ExpressionUUID->"9b4786a0-811e-4a07-96d5-fc8fac17fa9b"],
Cell[CellGroupData[{
Cell[245166, 5988, 200, 3, 29, "Input",ExpressionUUID->"0b307bd2-0cab-45ad-bcce-2dad1843d675"],
Cell[245369, 5993, 11124, 276, 91, "Output",ExpressionUUID->"400b2367-4f0f-4d0a-bdc6-c49b9b3b2cbc"]
}, Open  ]],
Cell[256508, 6272, 537, 14, 29, "Input",ExpressionUUID->"9c74e2f6-2055-48a6-ae10-d06f15177dbf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[257082, 6291, 160, 3, 67, "Section",ExpressionUUID->"db48a2c8-a7a9-442e-b379-559234c659c6"],
Cell[257245, 6296, 195, 3, 29, "Input",ExpressionUUID->"691b1e81-bb89-4233-ae46-86b213d99240"],
Cell[CellGroupData[{
Cell[257465, 6303, 205, 4, 29, "Input",ExpressionUUID->"6dce2e38-972f-4aca-9b00-ba91725c815a"],
Cell[257673, 6309, 17139, 379, 229, "Output",ExpressionUUID->"a0fdd277-5c5f-49ee-b46b-fbd55192a0c5"]
}, Open  ]],
Cell[274827, 6691, 243, 6, 29, "Input",ExpressionUUID->"c2351e71-9d29-4d06-bebe-dc155a8bd547"],
Cell[CellGroupData[{
Cell[275095, 6701, 294, 7, 29, "Input",ExpressionUUID->"fd633de7-4437-4575-bd30-576837af6b84"],
Cell[275392, 6710, 347, 8, 33, "Output",ExpressionUUID->"bd90df7c-ad97-47ba-a915-09ab9fa3076e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[275776, 6723, 248, 5, 29, "Input",ExpressionUUID->"90c66d75-8174-41ed-8299-ea92009be281"],
Cell[276027, 6730, 324, 7, 35, "Output",ExpressionUUID->"327c4031-bfdf-4702-9fdb-0dca4cad19df"]
}, Open  ]],
Cell[276366, 6740, 862, 20, 29, "Input",ExpressionUUID->"d9130d3c-324e-4ce8-9559-da77e5f96f3b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[277277, 6766, 155, 3, 69, "Chapter",ExpressionUUID->"b049ce76-e63e-49c6-ab3d-acfe88a20a40"],
Cell[277435, 6771, 199, 4, 29, "Input",ExpressionUUID->"3f4d3e84-afbe-4a27-90ef-1926d3f057f1"],
Cell[CellGroupData[{
Cell[277659, 6779, 198, 4, 29, "Input",ExpressionUUID->"6733eebe-3ef9-4a07-a5ef-1764a35db98d"],
Cell[277860, 6785, 15771, 367, 114, "Output",ExpressionUUID->"f641ef51-afc2-43de-8df9-8d29ab6ad203"]
}, Open  ]],
Cell[CellGroupData[{
Cell[293668, 7157, 811, 23, 71, "Input",ExpressionUUID->"2c7acbe0-dc94-4653-ba1e-58e9742c6623"],
Cell[294482, 7182, 2035, 62, 107, "Output",ExpressionUUID->"92e164aa-1c74-48b0-b72c-b4301d824fee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296554, 7249, 495, 11, 29, "Input",ExpressionUUID->"135078e8-64d1-460b-8492-f0b37c651e66"],
Cell[297052, 7262, 31414, 564, 251, "Output",ExpressionUUID->"c35fbf23-4486-4373-b30d-07abb5e788ec"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

